<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Window下Docker环境部署(六)</title>
    <link href="/2025/04/28/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E5%85%AD/"/>
    <url>/2025/04/28/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E5%85%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建命名数据卷"><a href="#1-创建命名数据卷" class="headerlink" title="1.创建命名数据卷"></a>1.创建命名数据卷</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker volume create pdf_vol<br>docker volume create record_vol<br>docker volume create app_log_vol<br></code></pre></div></td></tr></table></figure><h2 id="2-编写Dockerfile"><a href="#2-编写Dockerfile" class="headerlink" title="2.编写Dockerfile"></a>2.编写Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基础镜像（保持原配置）</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">11</span>-jdk-slim<br><br><span class="hljs-comment"># 系统环境配置（去除镜像加速）</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br><br><span class="hljs-comment"># 安装基础依赖（使用官方源）</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y --no-install-recommends \</span><br><span class="language-bash">    ca-certificates wget xfonts-75dpi xfonts-base \</span><br><span class="language-bash">    libxrender1 libxext6 libjpeg62-turbo libpng16-16 \</span><br><span class="language-bash">    fonts-wqy-zenhei fontconfig &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><br><span class="hljs-comment"># 安装wkhtmltopdf（保持原逻辑）</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.buster_amd64.deb \</span><br><span class="language-bash">    &amp;&amp; dpkg -i wkhtmltox_0.12.6-1.buster_amd64.deb || apt-get install -f -y \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">rm</span> *.deb</span><br><br><span class="hljs-comment"># 后续步骤保持原样</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> Source_Han_Sans_SC_*.otf /usr/share/fonts/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> fc-cache -f -v</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> app.jar myoutline.xsl ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /app/logs &amp;&amp; <span class="hljs-built_in">chmod</span> 755 /app/logs</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-Dlogging.file=/app/logs/app.log&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;app.jar&quot;</span>]</span><br></code></pre></div></td></tr></table></figure><h2 id="3-这是我的目录结构"><a href="#3-这是我的目录结构" class="headerlink" title="3.这是我的目录结构"></a>3.这是我的目录结构</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker<span class="hljs-literal">-test</span><br>            ├── Dockerfile<br>            ├── myoutline.xls<br>            ├── Source_Han_Sans_SC_Bold.otf<br>            ├── Source_Han_Sans_SC_Normal_Normal.otf<br>            └── app.jar<br></code></pre></div></td></tr></table></figure><h2 id="4-构建镜像"><a href="#4-构建镜像" class="headerlink" title="4.构建镜像"></a>4.构建镜像</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment">#如果文件有修改,需要重新构建镜像</span><br>docker build <span class="hljs-literal">-t</span> my<span class="hljs-literal">-java-app</span> .<br></code></pre></div></td></tr></table></figure><h2 id="5-运行容器"><a href="#5-运行容器" class="headerlink" title="5.运行容器"></a>5.运行容器</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> health <span class="hljs-literal">-p</span> <span class="hljs-number">8172</span>:<span class="hljs-number">8172</span> <span class="hljs-literal">-v</span> pdf_vol:/usr/share/nginx/<span class="hljs-keyword">static</span>/pdf <span class="hljs-literal">-v</span> record_vol:/usr/share/nginx/<span class="hljs-keyword">static</span>/record <span class="hljs-literal">-v</span> app_log_vol:/app/logs my<span class="hljs-literal">-java-app</span> <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window下Docker环境部署(五)</title>
    <link href="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%BA%94/"/>
    <url>/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="命名卷部署nginx最新版方案"><a href="#命名卷部署nginx最新版方案" class="headerlink" title="命名卷部署nginx最新版方案"></a>命名卷部署nginx最新版方案</h2><h3 id="1-创建命名数据卷"><a href="#1-创建命名数据卷" class="headerlink" title="1.创建命名数据卷"></a>1.创建命名数据卷</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为nginx_log_vol的持久化存储卷（防止nginx突然停止没有日志）</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker volume create nginx_log_vol<br>nginx_log_vol<br></code></pre></div></td></tr></table></figure><h3 id="2-启动nginx容器"><a href="#2-启动nginx容器" class="headerlink" title="2.启动nginx容器"></a>2.启动nginx容器</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-p</span> <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-literal">-p</span> <span class="hljs-number">443</span>:<span class="hljs-number">443</span> <span class="hljs-literal">-v</span> nginx_log_vol:/var/log/nginx nginx:latest<br></code></pre></div></td></tr></table></figure><h4 id="关键参数说明："><a href="#关键参数说明：" class="headerlink" title="关键参数说明："></a>关键参数说明：</h4><ul><li>nginx_conf_vol：存放主配置文件nginx.conf</li><li>nginx_conf.d_vol：存放子配置文件（如反向代理、SSL配置）</li><li>nginx_html_vol：静态资源目录（如HTML&#x2F;CSS&#x2F;JS文件）</li><li>nginx_log_vol：Nginx访问日志和错误日志</li><li>nginx_cert_vol：SSL证书文件（.pem和.key）</li><li>pdf_vol：PDF文件地址</li><li>record_vol：录音文件地址<figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-p</span> <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-literal">-p</span> <span class="hljs-number">18666</span>:<span class="hljs-number">18666</span> <span class="hljs-literal">-p</span> <span class="hljs-number">443</span>:<span class="hljs-number">443</span> <span class="hljs-literal">-v</span> pdf_vol:/usr/share/nginx/<span class="hljs-keyword">static</span>/pdf <span class="hljs-literal">-v</span> record_vol:/usr/share/nginx/<span class="hljs-keyword">static</span>/record  <span class="hljs-literal">-v</span> nginx_log_vol:/var/log/nginx mynginx:latest<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="3-验证部署状态"><a href="#3-验证部署状态" class="headerlink" title="3.验证部署状态"></a>3.验证部署状态</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-literal">--filter</span> name=nginx<br>CONTAINER ID   IMAGE          COMMAND                   CREATED         STATUS         PORTS                                      NAMES<br><span class="hljs-number">96</span>fb036e5581   nginx:latest   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">9</span> minutes ago   Up <span class="hljs-number">9</span> minutes   <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">80</span>-&gt;<span class="hljs-number">80</span>/tcp, <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">443</span>-&gt;<span class="hljs-number">443</span>/tcp   nginx<br></code></pre></div></td></tr></table></figure><h4 id="打开网址-http-localhost"><a href="#打开网址-http-localhost" class="headerlink" title="打开网址 http://localhost/"></a>打开网址 <a href="http://localhost/">http://localhost/</a></h4><h3 id="4-nginx迁移"><a href="#4-nginx迁移" class="headerlink" title="4.nginx迁移"></a>4.nginx迁移</h3><h4 id="1容器保存为镜像"><a href="#1容器保存为镜像" class="headerlink" title="1容器保存为镜像"></a>1容器保存为镜像</h4><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker commit nginx mynginx<br></code></pre></div></td></tr></table></figure><h4 id="2导出镜像为tar文件"><a href="#2导出镜像为tar文件" class="headerlink" title="2导出镜像为tar文件"></a>2导出镜像为tar文件</h4><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker save <span class="hljs-literal">-o</span> mynginx.tar mynginx<br></code></pre></div></td></tr></table></figure><h4 id="3导入镜像"><a href="#3导入镜像" class="headerlink" title="3导入镜像"></a>3导入镜像</h4><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker load <span class="hljs-literal">-i</span> mynginx.tar<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window下Docker环境部署(四)</title>
    <link href="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E5%9B%9B/"/>
    <url>/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="命名卷部署es7-13-2方案"><a href="#命名卷部署es7-13-2方案" class="headerlink" title="命名卷部署es7.13.2方案"></a>命名卷部署es7.13.2方案</h2><h3 id="1-创建命名数据卷"><a href="#1-创建命名数据卷" class="headerlink" title="1 创建命名数据卷"></a>1 创建命名数据卷</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为es_vol的持久化存储卷（数据由Docker自动管理）</span><br>docker volume create es_vol<br></code></pre></div></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数据存储在Docker托管路径（通过\wsl$\docker-desktop-data...访问）</li><li>无需手动配置Windows目录权限，适合快速部署</li></ul><h3 id="2-启动SQL-Server容器"><a href="#2-启动SQL-Server容器" class="headerlink" title="2.启动SQL Server容器"></a>2.启动SQL Server容器</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> es7 <span class="hljs-literal">-p</span> <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> <span class="hljs-literal">-p</span> <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;xpack.security.enabled=true&quot;</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;ELASTIC_PASSWORD=Root1234&quot;</span> <span class="hljs-literal">-v</span> es_vol:/usr/share/elasticsearch/<span class="hljs-keyword">data</span> elasticsearch:<span class="hljs-number">7.13</span>.<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="关键参数说明："><a href="#关键参数说明：" class="headerlink" title="关键参数说明："></a>关键参数说明：</h4><ul><li><code>-v es_vol://usr/share/elasticsearch/data</code>：将容器内的&#x2F;data映射到命名卷</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; </code>可选：调整JVM内存</li><li><code>-e &quot;xpack.security.enabled=true&quot; </code>启用安全功能</li><li><code>-e &quot;ELASTIC_PASSWORD=yourpassword&quot; </code>设置elastic用户密码</li><li></li><li>容器停止&#x2F;重启不会删除数据，但执行<code>docker rm</code>会销毁未挂载的容器层数据</li></ul><h3 id="3-验证部署状态"><a href="#3-验证部署状态" class="headerlink" title="3.验证部署状态"></a>3.验证部署状态</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 检查容器运行状态</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-literal">--filter</span> name=es7<br>CONTAINER ID   IMAGE                  COMMAND                   CREATED          STATUS          PORTS                                            NAMES<br><span class="hljs-number">3</span>d45f958c8ca   elasticsearch:<span class="hljs-number">7.13</span>.<span class="hljs-number">2</span>   <span class="hljs-string">&quot;/bin/tini -- /usr/l…&quot;</span>   <span class="hljs-number">12</span> minutes ago   Up <span class="hljs-number">12</span> minutes   <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9200</span>-&gt;<span class="hljs-number">9200</span>/tcp, <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9300</span>-&gt;<span class="hljs-number">9300</span>/tcp   es7<br><br><span class="hljs-comment"># 进入容器验证数据库服务</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker exec <span class="hljs-literal">-it</span> es7 /bin/bash<br>[<span class="hljs-type">root</span>@<span class="hljs-number">3</span><span class="hljs-type">d45f958c8ca</span> <span class="hljs-type">elasticsearch</span>]<span class="hljs-comment"># elasticsearch-setup-passwords interactive</span><br></code></pre></div></td></tr></table></figure><h4 id="网页验证"><a href="#网页验证" class="headerlink" title="网页验证"></a>网页验证</h4><ul><li>打开网址 <a href="http://localhost:9200/">http://localhost:9200/</a></li><li>用户名:<code>elastic</code> 密码:<code>Root1234</code></li></ul><h3 id="4-修改密码"><a href="#4-修改密码" class="headerlink" title="4.修改密码"></a>4.修改密码</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 命令</span><br><span class="hljs-comment"># docker exec -it es7 /bin/bash</span><br><span class="hljs-comment"># elasticsearch-setup-passwords interactive</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker exec <span class="hljs-literal">-it</span> es7 /bin/bash<br>[<span class="hljs-type">root</span>@<span class="hljs-number">3</span><span class="hljs-type">d45f958c8ca</span> <span class="hljs-type">elasticsearch</span>]<span class="hljs-comment"># elasticsearch-setup-passwords interactive</span><br>Initiating the setup of passwords <span class="hljs-keyword">for</span> reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.<br>You will be prompted to enter passwords as the <span class="hljs-keyword">process</span> progresses.<br>Please confirm that you would like to <span class="hljs-keyword">continue</span> [<span class="hljs-type">y</span>/<span class="hljs-type">N</span>]y<br><br><br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">elastic</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">elastic</span>]:<br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">apm_system</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">apm_system</span>]:<br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">kibana_system</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">kibana_system</span>]:<br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">logstash_system</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">logstash_system</span>]:<br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">beats_system</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">beats_system</span>]:<br>Enter password <span class="hljs-keyword">for</span> [<span class="hljs-type">remote_monitoring_user</span>]:<br>Reenter password <span class="hljs-keyword">for</span> [<span class="hljs-type">remote_monitoring_user</span>]:<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">apm_system</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">kibana_system</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">kibana</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">logstash_system</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">beats_system</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">remote_monitoring_user</span>]<br>Changed password <span class="hljs-keyword">for</span> user [<span class="hljs-type">elastic</span>]<br>[<span class="hljs-type">root</span>@<span class="hljs-number">3</span><span class="hljs-type">d45f958c8ca</span> <span class="hljs-type">elasticsearch</span>]<span class="hljs-comment"># exit</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window下Docker环境部署(三)</title>
    <link href="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%B8%89/"/>
    <url>/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="命名卷部署redis7-0方案"><a href="#命名卷部署redis7-0方案" class="headerlink" title="命名卷部署redis7.0方案"></a>命名卷部署redis7.0方案</h2><h3 id="1-创建命名数据卷"><a href="#1-创建命名数据卷" class="headerlink" title="1 创建命名数据卷"></a>1 创建命名数据卷</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为mssql_vol的持久化存储卷（数据由Docker自动管理）</span><br>docker volume create mssql_vol<br></code></pre></div></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数据存储在Docker托管路径（通过\wsl$\docker-desktop-data...访问）</li><li>无需手动配置Windows目录权限，适合快速部署</li></ul><h3 id="2-启动SQL-Server容器"><a href="#2-启动SQL-Server容器" class="headerlink" title="2.启动SQL Server容器"></a>2.启动SQL Server容器</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> redis7 <span class="hljs-literal">-p</span> <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> <span class="hljs-literal">-v</span> redis_vol:/<span class="hljs-keyword">data</span> redis:<span class="hljs-number">7.0</span>.<span class="hljs-number">14</span> redis<span class="hljs-literal">-server</span> <span class="hljs-literal">--requirepass</span> <span class="hljs-string">&quot;Root1234&quot;</span> <span class="hljs-literal">--protected-mode</span> yes<br></code></pre></div></td></tr></table></figure><h4 id="关键参数说明："><a href="#关键参数说明：" class="headerlink" title="关键参数说明："></a>关键参数说明：</h4><ul><li><code>-v redis_vol:/data</code>：将容器内的&#x2F;data映射到命名卷</li><li>容器停止&#x2F;重启不会删除数据，但执行<code>docker rm</code>会销毁未挂载的容器层数据</li></ul><h3 id="3-验证部署状态"><a href="#3-验证部署状态" class="headerlink" title="3.验证部署状态"></a>3.验证部署状态</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># 检查容器运行状态<br>PS C:\Users\Administrator&gt; docker ps -a <span class="hljs-comment">--filter name=redis7</span><br>CONTAINER ID   IMAGE          COMMAND                   CREATED          STATUS          PORTS                    NAMES<br><span class="hljs-number">01</span>eedbb7f8b1   redis:<span class="hljs-number">7.0</span><span class="hljs-number">.14</span>   &quot;docker-entrypoint.s…&quot;   <span class="hljs-number">33</span> seconds ago   Up <span class="hljs-number">32</span> seconds   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">6379</span>-&gt;<span class="hljs-number">6379</span>/tcp   redis7<br><br># 进入容器验证数据库服务<br>PS C:\Users\Administrator&gt; docker exec -it redis7 redis-cli -a Root1234<br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>AUTH failed: ERR AUTH &lt;<span class="hljs-keyword">password</span>&gt; <span class="hljs-keyword">called</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">password</span> configured <span class="hljs-keyword">for</span> the <span class="hljs-keyword">default</span> <span class="hljs-keyword">user</span>. Are you sure your <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">is</span> correct?<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window下Docker环境部署(二)</title>
    <link href="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%BA%8C/"/>
    <url>/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="命名卷部署SqlServer2017方案"><a href="#命名卷部署SqlServer2017方案" class="headerlink" title="命名卷部署SqlServer2017方案"></a>命名卷部署SqlServer2017方案</h2><h3 id="1-创建命名数据卷"><a href="#1-创建命名数据卷" class="headerlink" title="1 创建命名数据卷"></a>1 创建命名数据卷</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为mssql_vol的持久化存储卷（数据由Docker自动管理）</span><br>docker volume create mssql_vol<br></code></pre></div></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数据存储在Docker托管路径（通过\wsl$\docker-desktop-data...访问）</li><li>无需手动配置Windows目录权限，适合快速部署</li></ul><h3 id="2-启动SQL-Server容器"><a href="#2-启动SQL-Server容器" class="headerlink" title="2.启动SQL Server容器"></a>2.启动SQL Server容器</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> sqlserver2017 <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;ACCEPT_EULA=Y&quot;</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;MSSQL_SA_PASSWORD=YourStrong@Passw0rd&quot;</span> <span class="hljs-literal">-p</span> <span class="hljs-number">1433</span>:<span class="hljs-number">1433</span> <span class="hljs-literal">-v</span> mssql_vol:/var/opt/mssql mcr.microsoft.com/mssql/server:<span class="hljs-number">2017</span><span class="hljs-literal">-latest</span><br></code></pre></div></td></tr></table></figure><h4 id="关键参数说明："><a href="#关键参数说明：" class="headerlink" title="关键参数说明："></a>关键参数说明：</h4><ul><li><code>-v mssql_vol:/var/opt/mssql</code>：将容器内的&#x2F;var&#x2F;opt&#x2F;mssql映射到命名卷</li><li>容器停止&#x2F;重启不会删除数据，但执行<code>docker rm</code>会销毁未挂载的容器层数据</li><li><code>MSSQL_SA_PASSWORD=YourStrong@Passw0rd</code> 必须包含大小写+数字+符号</li></ul><h3 id="3-验证部署状态"><a href="#3-验证部署状态" class="headerlink" title="3.验证部署状态"></a>3.验证部署状态</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 检查容器运行状态</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-literal">--filter</span> name=sqlserver2017<br>CONTAINER ID   IMAGE                                        COMMAND                   CREATED          STATUS          PORTS                    NAMES<br><span class="hljs-number">8985</span>a7ca82b0   mcr.microsoft.com/mssql/server:<span class="hljs-number">2017</span><span class="hljs-literal">-latest</span>   <span class="hljs-string">&quot;/opt/mssql/bin/nonr…&quot;</span>   <span class="hljs-number">42</span> seconds ago   Up <span class="hljs-number">42</span> seconds   <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">1433</span>-&gt;<span class="hljs-number">1433</span>/tcp   sqlserver2017<br><br><span class="hljs-comment"># 进入容器验证数据库服务</span><br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; docker exec <span class="hljs-literal">-it</span> sqlserver2017 /opt/mssql<span class="hljs-literal">-tools</span>/bin/sqlcmd <span class="hljs-literal">-S</span> localhost <span class="hljs-literal">-U</span> SA <span class="hljs-literal">-P</span> <span class="hljs-string">&quot;Root1234&quot;</span> <span class="hljs-literal">-Q</span> <span class="hljs-string">&quot;SELECT @@VERSION&quot;</span><br>                                                                                                                                                                                                                                                <br><span class="hljs-literal">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br>Microsoft SQL Server <span class="hljs-number">2017</span> (RTM<span class="hljs-literal">-CU31-OD</span>) (KB5050533) - <span class="hljs-number">14.0</span>.<span class="hljs-number">3490.10</span> (X64)<br>        Feb <span class="hljs-number">19</span> <span class="hljs-number">2025</span> <span class="hljs-number">12</span>:<span class="hljs-number">19</span>:<span class="hljs-number">28</span><br>        Copyright (C) <span class="hljs-number">2017</span> Microsoft Corporation<br>        Developer Edition (<span class="hljs-number">64</span><span class="hljs-literal">-bit</span>) on Linux (Ubuntu <span class="hljs-number">18.04</span>.<span class="hljs-number">6</span> LTS)                                                        <br><br>(<span class="hljs-number">1</span> rows affected)<br></code></pre></div></td></tr></table></figure><h3 id="4-navicat连接sqlserver2017"><a href="#4-navicat连接sqlserver2017" class="headerlink" title="4.navicat连接sqlserver2017"></a>4.navicat连接sqlserver2017</h3><p><img src="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%BA%8C/j1.jpg" alt="j1.jpg"></p><ul><li>报错<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">[<span class="hljs-number">08001</span>] [Microsoft[ODBc Driver <span class="hljs-number">17</span> <span class="hljs-keyword">for</span> sOL <span class="hljs-keyword">Server</span>]Named Pipes Provider: Could <span class="hljs-keyword">not</span> <span class="hljs-keyword">open</span> a <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">sQL</span> <span class="hljs-keyword">Server</span> [<span class="hljs-number">53</span>](<span class="hljs-number">53</span>)<br>[HYT00] [Microsoft][ODBC Driver <span class="hljs-number">17</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">SQl</span> <span class="hljs-keyword">Server</span>]<span class="hljs-keyword">Login</span> timeout expired (<span class="hljs-number">0</span>)<br>[<span class="hljs-number">08001</span>l [MicrosoftlODBC Driver <span class="hljs-number">17</span> <span class="hljs-keyword">for</span> SOl ServerlA network-related <span class="hljs-keyword">or</span> instance-specific error has occurred whileestablishing a <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> SOL <span class="hljs-keyword">Server</span>, <span class="hljs-keyword">Server</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> accessible. <span class="hljs-keyword">Check</span> <span class="hljs-keyword">if</span> instance <span class="hljs-type">name</span> <span class="hljs-keyword">is</span> correct <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span> SOlServer <span class="hljs-keyword">is</span> configured <span class="hljs-keyword">to</span> allow remote connections. <span class="hljs-keyword">For</span> more information see SOL <span class="hljs-keyword">Server</span> Books Online. (<span class="hljs-number">53</span>)<br></code></pre></div></td></tr></table></figure></li><li>找到<code>E:\Program Files\PremiumSoft\Navicat Premium 15</code>下的<code>msodbcsql_64.msi</code>,双击安装</li></ul><h3 id="5-运行init-sql"><a href="#5-运行init-sql" class="headerlink" title="5.运行init.sql"></a>5.运行init.sql</h3>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
      <tag>SQL Server</tag>
      
      <tag>navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window下Docker环境部署(一)</title>
    <link href="/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%B8%80/"/>
    <url>/2025/04/27/Window%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-整体架构图"><a href="#1-整体架构图" class="headerlink" title="1. 整体架构图"></a>1. 整体架构图</h2><pre><code class=" mermaid">graph TD    subgraph 数据层 Data Layer        A[(SQL Server)]        B[(Redis)]        C[(Elasticsearch)]    end    subgraph 应用层 Application Layer        E[Java 应用服务]        F[Java 引擎服务]        G[wkhtmltopdf]        H[Nginx]    end        subgraph 互联网消息队列 RabbitMQ        I[RabbitMQ]    end    用户 --&gt;|HTTP/HTTPS| H    H --&gt;|静态资源| 用户    H --&gt;|反向代理| E    E --&gt;|TCP| A    E --&gt;|TCP| B    E --&gt;|HTTP| C    E --&gt;|API| F    E --&gt;|API| G    E --&gt;|AMQP| I    G --&gt;|文件存储| H</code></pre><h2 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2.目录结构"></a>2.目录结构</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>/<br>├── data-layer/                  <span class="hljs-comment"># 数据服务专用</span><br>│   ├── docker-compose.yml       <span class="hljs-comment"># 数据层编排文件</span><br>│   └── volumes/<br>│       ├── mssql-data/          <span class="hljs-comment"># SQL Server数据卷</span><br>│       ├── redis-data/          <span class="hljs-comment"># Redis数据卷</span><br>│       └── es-data/             <span class="hljs-comment"># ES数据卷</span><br>└── app-layer/                   <span class="hljs-comment"># 应用服务专用</span><br>├── docker-compose.yml       <span class="hljs-comment"># 应用层编排文件</span><br>├── nginx/<br>│   ├── nginx.conf           <span class="hljs-comment"># Nginx主配置</span><br>│   └── certs/               <span class="hljs-comment"># SSL证书目录</span><br>├── java-app/                <span class="hljs-comment"># 业务应用</span><br>│   ├── Dockerfile<br>│   └── <span class="hljs-keyword">target</span>/*.jar         <br>├── java-platform/               <span class="hljs-comment"># 引擎服务</span><br>│   ├── Dockerfile<br>│   └── <span class="hljs-keyword">target</span>/*.jar<br>├── wk2pdf/                  <span class="hljs-comment"># PDF服务</span><br>│   └── Dockerfile<br>└── static-files/            <span class="hljs-comment"># 静态文件存储</span><br></code></pre></div></td></tr></table></figure><h2 id="3-网络设计"><a href="#3-网络设计" class="headerlink" title="3.网络设计"></a>3.网络设计</h2><table><thead><tr><th>网络名称</th><th>网络类型</th><th>连接服务</th><th>访问策略</th></tr></thead><tbody><tr><td>data-network</td><td>bridge</td><td>SQL Server&#x2F;Redis&#x2F;ES&#x2F;RabbitMQ</td><td>仅允许应用层服务访问</td></tr><tr><td>app-network</td><td>bridge</td><td>Nginx&#x2F;Java应用&#x2F;Java引擎&#x2F;wk2pdf</td><td>仅允许外部访问Nginx</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高阶调研能力</title>
    <link href="/2025/03/25/%E9%AB%98%E9%98%B6%E8%B0%83%E7%A0%94%E8%83%BD%E5%8A%9B/"/>
    <url>/2025/03/25/%E9%AB%98%E9%98%B6%E8%B0%83%E7%A0%94%E8%83%BD%E5%8A%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="调研能力一-挖掘式调研-找竞品的问题"><a href="#调研能力一-挖掘式调研-找竞品的问题" class="headerlink" title="调研能力一 挖掘式调研(找竞品的问题)"></a>调研能力一 挖掘式调研(找竞品的问题)</h2><ol><li>拆分问题</li><li>挖掘信息</li><li>评估信息</li><li>关键假设</li><li>验证假设(证伪)</li><li>结论</li></ol><h2 id="调研能力二-系统式调研-抄竞品"><a href="#调研能力二-系统式调研-抄竞品" class="headerlink" title="调研能力二 系统式调研(抄竞品)"></a>调研能力二 系统式调研(抄竞品)</h2><ol><li>确定目标</li><li>搜集资料</li><li>分析资料</li><li>以竞品为成功标准做尝试</li></ol><h2 id="调研能力三-爆炸式调研-在一堆竞品中找成功的秘籍"><a href="#调研能力三-爆炸式调研-在一堆竞品中找成功的秘籍" class="headerlink" title="调研能力三 爆炸式调研(在一堆竞品中找成功的秘籍)"></a>调研能力三 爆炸式调研(在一堆竞品中找成功的秘籍)</h2><ol><li>确定目标</li><li>搜集大量同行的资料</li><li>分析大量资料</li><li>找到成功的共性</li><li>验证成功的共性</li></ol><h2 id="调研能力四-自动化调研"><a href="#调研能力四-自动化调研" class="headerlink" title="调研能力四 自动化调研"></a>调研能力四 自动化调研</h2><ol><li>确定目标</li><li>使用自动化的手段搜集大量资料(爬虫,人工)</li><li>编写一套流程分析大量资料</li><li>找到成功的共性,设置报警值</li><li>实时监控对手，让自己比对手更了解对手</li><li>完成站稳第一或者成功逆袭成为第一</li></ol><h2 id="调研步骤"><a href="#调研步骤" class="headerlink" title="调研步骤"></a>调研步骤</h2><ol><li>明确调研目标,你想通过调研达到什么目标(少投资,可行性,上限有多高)</li><li>缩小调研范围,判断哪些是关键信息(房租,成本,市场规模,竞争对手)</li><li>罗列竞品,判断竞品的优点和缺点(优点:价格便宜,缺点:质量差,没名气)取长补短(没有竞品的话就要考虑一下,为什么会没有竞品,是不是这个市场并不适合这个产品)</li><li>不择手段的获取情报,有哪些手段获取情报(装客户,装面试,问竞品的上下游供应商)</li><li>拿到想要的信息,用证伪的方式来验证目标到底可行不可行(不行果断放弃,别犹豫)</li></ol>]]></content>
    
    
    <categories>
      
      <category>创业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>调研能力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监测jvm数据变化</title>
    <link href="/2025/03/18/%E7%9B%91%E6%B5%8Bjvm%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96/"/>
    <url>/2025/03/18/%E7%9B%91%E6%B5%8Bjvm%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>jconsole(java自带)</li><li>在安装java的目录bin下</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>启动时需要加上一些参数(会有性能损耗)<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">java</span> -Dcom.sun.management.jmxremote<span class="hljs-regexp"> ^</span><br>-Dcom.sun.management.jmxremote.port=<span class="hljs-number">12345</span><span class="hljs-regexp"> ^</span>  <span class="hljs-comment"># 指定JMX端口（如12345）</span><br>-Dcom.sun.management.jmxremote.authenticate=<span class="hljs-literal">false</span><span class="hljs-regexp"> ^</span>  <span class="hljs-comment"># 禁用认证（生产环境建议启用）</span><br>-Dcom.sun.management.jmxremote.ssl=<span class="hljs-literal">false</span><span class="hljs-regexp"> ^</span>  <span class="hljs-comment"># 禁用SSL</span><br>-Djava.rmi.server.hostname=<span class="hljs-number">127.0.0.1</span><span class="hljs-regexp"> ^</span>  <span class="hljs-comment"># 如果服务在本地，设置为localhost或本机IP</span><br>-jar xxx.jar<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>双击jconsole.exe</li></ul><p><img src="/2025/03/18/%E7%9B%91%E6%B5%8Bjvm%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96/jvm1.jpg" alt="jvm1"></p><ul><li>查看本地进程是否有你想要的进程</li><li>如果有就双击-》不安全链接，进行查看</li><li>如果没有，就使用远程连接<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">12345</span> # port=<span class="hljs-number">12345</span> hostname=<span class="hljs-number">127.0.0.1</span><br></code></pre></div></td></tr></table></figure></li><li>连接-》不安全链接，进行查看<br><img src="/2025/03/18/%E7%9B%91%E6%B5%8Bjvm%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96/jvm2.jpg" alt="jvm2"></li><li>连接成功<br><img src="/2025/03/18/%E7%9B%91%E6%B5%8Bjvm%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96/jvm3.jpg" alt="jvm3"></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea配置maven小坑记录</title>
    <link href="/2025/03/07/idea%E9%85%8D%E7%BD%AEmaven%E5%B0%8F%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/07/idea%E9%85%8D%E7%BD%AEmaven%E5%B0%8F%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><blockquote><p>idea 配置maven 时，提示找不到maven对应的jar包文件。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol><li>内网环境</li><li>idea，maven，jdk 版本均为常用版本（因为工作原因，需要经常给内网用户部署系统）</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven</li><li>勾上work offline选项</li><li>点击apply，ok</li><li>reload all maven projects</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu server24 安装clash</title>
    <link href="/2025/02/19/ubuntu-server24-%E5%AE%89%E8%A3%85clash/"/>
    <url>/2025/02/19/ubuntu-server24-%E5%AE%89%E8%A3%85clash/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-一键安装-Clash"><a href="#Linux-一键安装-Clash" class="headerlink" title="Linux 一键安装 Clash"></a>Linux 一键安装 Clash</h1><p>因为有在服务器上使用代理的需求，试过许多开源脚本，总是遇到各种问题。于是自己动手，丰衣足食：对 <code>Clash</code> 的安装过程及功能进行了友好封装，使用起来优雅、简单、明确。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>需要 <code>root</code> 或 <code>sudo</code> 权限。</li><li>具备 <code>bash</code> 和 <code>systemd</code> 的系统环境。</li><li>已适配：<code>CentOS 7.6</code>、<code>Debian 12</code>、<code>Ubuntu 24.04.1 LTS</code>。</li></ul><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gh-proxy.com/https://github.com/nelvko/clash-for-linux-install.git \<br>  &amp;&amp; <span class="hljs-built_in">cd</span> clash-for-linux-install \<br>  &amp;&amp; <span class="hljs-built_in">sudo</span> bash -c <span class="hljs-string">&#x27;. install.sh; exec bash&#x27;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如遇问题，请在查阅<a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a>及 <a href="https://github.com/nelvko/clash-for-linux-install/issues?q=is:issue">issue</a> 未果后进行反馈。</p></blockquote><ul><li>上述克隆命令使用了<a href="https://gh-proxy.com/">加速前缀</a>，如失效请更换其他<a href="https://ghproxy.link/">可用链接</a>。</li><li><del>不懂什么是订阅链接的小白可参考</del>：<a href="https://github.com/nelvko/clash-for-linux-install/issues/1">issue#1</a></li><li>没有订阅？<a href="https://次元.net/auth/register?code=oUbI">click me</a></li><li>验证是否连通外网：<code>wget www.google.com</code></li></ul><h3 id="命令一览"><a href="#命令一览" class="headerlink" title="命令一览"></a>命令一览</h3><p>执行 <code>clash</code> 列出开箱即用的快捷命令。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clash<br>Usage:                                    <br>    clashon                开启代理       <br>    clashoff               关闭代理       <br>    clashui                面板地址       <br>    clashtun [on|off]      Tun模式        <br>    clashsecret [secret]   查看/设置密钥  <br>    clashmixin [-e|-r]     Mixin配置      <br>    clashupdate [auto|<span class="hljs-built_in">log</span>] 更新订阅<br></code></pre></div></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clashoff<br>😼 已关闭代理环境<br><br>$ clashon<br>😼 已开启代理环境<br><br>$ clashui<br>😼 Web 面板地址...<br></code></pre></div></td></tr></table></figure><p>原理：</p><ul><li>使用 <code>systemctl</code> 控制 <code>clash</code> 启停，并调整代理环境变量的值（http_proxy 等）。因为应用程序在发起网络请求时，会通过其指定的代理地址转发流量，不调整会造成：关闭代理后仍转发导致请求失败、开启代理后未设置代理地址导致请求不转发。</li><li><code>clashon</code> 等命令封装了上述流程。</li></ul><h3 id="定时更新订阅"><a href="#定时更新订阅" class="headerlink" title="定时更新订阅"></a>定时更新订阅</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clashupdate [url]<br>😼 配置更新成功，已重启生效<br><br>$ clashupdate auto [url]<br>😼 定时任务设置成功<br><br>$ clashupdate <span class="hljs-built_in">log</span><br>✅ 2024-12-13 23:38:56 配置更新成功 ...<br></code></pre></div></td></tr></table></figure><ul><li><code>clashupdate</code> 会记忆上次更新成功的订阅，后续执行无需再指定订阅 <code>url</code>。</li><li>可通过 <code>crontab -e</code> 修改定时更新频率及订阅链接。</li><li>其他更新方式：<a href="https://github.com/nelvko/clash-for-linux-install/pull/24#issuecomment-2565054701">pr#24</a></li></ul><h3 id="Web-控制台密钥"><a href="#Web-控制台密钥" class="headerlink" title="Web 控制台密钥"></a>Web 控制台密钥</h3><p>控制台密钥默认为空，若暴露到公网使用建议更新密钥。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clashsecret xxx<br>😼 密钥更新成功，已重启生效<br><br>$ clashsecret<br>😼 当前密钥：xxx<br></code></pre></div></td></tr></table></figure><h3 id="Tun-模式"><a href="#Tun-模式" class="headerlink" title="Tun 模式"></a><code>Tun</code> 模式</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clashtun<br>😾 Tun 状态：关闭<br><br>$ clashtun on<br>😼 Tun 模式已开启<br></code></pre></div></td></tr></table></figure><ul><li>作用：实现本机及 <code>Docker</code> 等容器的所有流量路由到 <code>clash</code> 代理、DNS 劫持等。</li><li>原理：<a href="https://www.clashverge.dev/guide/term.html#tun">clash-verge-rev</a>、 <a href="https://clash.wiki/premium/tun-device.html">clash.wiki</a>。</li></ul><h3 id="Mixin-配置"><a href="#Mixin-配置" class="headerlink" title="Mixin 配置"></a><code>Mixin</code> 配置</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clashmixin<br>😼 查看 mixin 配置（less）<br><br>$ clashmixin -e<br>😼 编辑 mixin 配置（vim）<br><br>$ clashmixin -r<br>😼 查看 运行时 配置（less）<br></code></pre></div></td></tr></table></figure><ul><li>作用：用来存储自定义配置，防止更新订阅后覆盖丢失自定义配置内容。</li><li>运行时配置是订阅配置和 <code>Mixin</code> 配置的并集。</li><li>相同配置项优先级：<code>Mixin</code> 配置 &gt; 订阅配置。</li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>以下为通用命令，<code>root</code> 用户可直接使用： <code>. uninstall.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> bash -c <span class="hljs-string">&#x27;. uninstall.sh; exec bash&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="配置下载失败或无效"><a href="#配置下载失败或无效" class="headerlink" title="配置下载失败或无效"></a>配置下载失败或无效</h3><ul><li>下载失败：脚本使用 <code>wget</code>、<code>curl</code> 命令进行了多次<a href="https://github.com/nelvko/clash-for-linux-install/blob/035c85ac92166e95b7503b2a678a6b535fbd4449/script/common.sh#L32-L46">重试</a>下载，如果还是失败可能是机场限制，请自行粘贴订阅内容到配置文件：<a href="https://github.com/nelvko/clash-for-linux-install/issues/1#issuecomment-2066334716">issue#1</a></li><li>订阅配置无效：<del><a href="https://github.com/nelvko/clash-for-linux-install/issues/14#issuecomment-2513303276">issue#14</a></del><br>配置下载成功后会对其进行校验，校验失败将在本地进行订阅转换后重试，仍无效请检查是否为有效的 <code>clash</code> 订阅。</li></ul><h3 id="bash-clashon-command-not-found"><a href="#bash-clashon-command-not-found" class="headerlink" title="bash: clashon: command not found"></a>bash: clashon: command not found</h3><ul><li>原因：使用 <code>bash install.sh</code> 执行脚本不会对当前 <code>shell</code> 生效。</li><li>解决：当前 <code>shell</code> 执行下 <code>bash</code> 即可。</li></ul><details><summary>几种运行方式的区别：</summary><ul><li><p><code>bash</code> 命令运行：当前 <code>shell</code> 开启一个子 <code>shell</code> 执行脚本，对环境的修改不会作用到当前 <code>shell</code>，因此不具备 <code>clashon</code><br> 等命令。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 需要有可执行权限</span><br>$ ./install.sh<br> <br><span class="hljs-comment"># 不需要可执行权限，需要读权限</span><br>$ bash ./install.sh<br></code></pre></div></td></tr></table></figure></li><li><p><code>shell</code> 内建命令运行：脚本在当前 <code>shell</code> 环境中执行，变量和函数的定义对当前 <code>shell</code> 有效，<code>root</code> 用户推荐这种方式执行脚本。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 不需要可执行权限，需要读权限</span><br>$ . install.sh<br>$ <span class="hljs-built_in">source</span> uninstall.sh<br></code></pre></div></td></tr></table></figure></li></ul></details><h3 id="ping-不通外网"><a href="#ping-不通外网" class="headerlink" title="ping 不通外网"></a>ping 不通外网</h3><ul><li><code>ping</code> 命令使用的是第三层中的 <code>ICMP</code> 协议，不依赖 <code>clash</code> 代理的上层 <code>TCP</code> 协议。</li><li>执行 <code>clashtun on</code> 后可以 <code>ping</code> 通，但得到的是 fake ip，原理详见：<a href="https://clash.wiki/configuration/dns.html#fake-ip">clash.wiki</a>。</li></ul><h3 id="服务启动失败-未启动"><a href="#服务启动失败-未启动" class="headerlink" title="服务启动失败&#x2F;未启动"></a>服务启动失败&#x2F;未启动</h3><ul><li><a href="https://github.com/nelvko/clash-for-linux-install/issues/15#issuecomment-2507341281">端口占用</a></li><li><a href="https://github.com/nelvko/clash-for-linux-install/issues/11#issuecomment-2469817217">系统为 WSL 环境或不具备 systemd</a></li></ul><h3 id="x86、arm架构"><a href="#x86、arm架构" class="headerlink" title="x86、arm架构"></a>x86、arm架构</h3><p>将 <code>resource/zip</code> 目录中的 <code>clash-linux-amd64-2023.08.17.gz</code>、<code>yq_linux_amd64.tar.gz</code>、<code>subconverter_linux64.tar.gz</code> 压缩包替换为对应架构版本后再执行安装脚本。</p><blockquote><p>目前仅支持自动下载 clash 的对应架构软件包。</p></blockquote><ul><li><a href="https://github.com/mikefarah/yq/releases/tag/v4.45.1">yq v4.45.1</a></li><li><a href="https://github.com/tindy2013/subconverter/releases/tag/v0.9.0">subconverter v0.9.0</a></li><li><a href="https://downloads.clash.wiki/ClashPremium/">Clash Premium</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://clash.wiki/">Clash 知识库</a></li><li><a href="https://www.clash.la/releases/">Clash 全家桶下载</a></li><li><a href="https://github.com/tindy2013/subconverter">subconverter：本地订阅转换</a></li><li><a href="https://github.com/haishanh/yacd">yacd：Web UI</a></li><li><a href="https://github.com/mikefarah/yq">yq：处理 yaml</a></li></ul><h2 id="Todolog"><a href="#Todolog" class="headerlink" title="Todolog"></a>Todolog</h2><ul><li><input checked="" disabled="" type="checkbox"> 定时更新配置</li><li><input checked="" disabled="" type="checkbox"> 😼</li><li><input checked="" disabled="" type="checkbox"> 适配其他发行版</li><li><input checked="" disabled="" type="checkbox"> 配置更新日志</li><li><input checked="" disabled="" type="checkbox"> Tun 模式</li><li><input checked="" disabled="" type="checkbox"> mixin 配置</li><li><input checked="" disabled="" type="checkbox"> 适配x86、arm架构</li><li><input checked="" disabled="" type="checkbox"> 本地订阅转换</li><li><input disabled="" type="checkbox"> 切换 mohomo 内核</li><li><input disabled="" type="checkbox"> <a href="https://github.com/nelvko/clash-for-linux-install/issues">bug &#x2F; 需求</a></li></ul><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://github.com/nelvko/clash-for-linux-install">@nelvko</a></p><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><ol><li>编写本项目主要目的为学习和研究 <code>Shell</code> 编程，不得将本项目中任何内容用于违反国家&#x2F;地区&#x2F;组织等的法律法规或相关规定的其他用途。</li><li>本项目保留随时对免责声明进行补充或更改的权利，直接或间接使用本项目内容的个人或组织，视为接受本项目的特别声明。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装MySQL数据库8.0</title>
    <link href="/2025/02/16/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%938-0/"/>
    <url>/2025/02/16/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%938-0/</url>
    
    <content type="html"><![CDATA[<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><h3 id="1-拉取-MySQL-镜像"><a href="#1-拉取-MySQL-镜像" class="headerlink" title="1. 拉取 MySQL 镜像"></a>1. 拉取 MySQL 镜像</h3><p><code>docker pull mysql:8</code></p><h3 id="2-运行mysql镜像并设置环境变量"><a href="#2-运行mysql镜像并设置环境变量" class="headerlink" title="2. 运行mysql镜像并设置环境变量"></a>2. 运行mysql镜像并设置环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name my_mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=my_secret_password -d -p 3306:3306 mysql:8<br></code></pre></div></td></tr></table></figure><blockquote><p>参数详解:</p><blockquote><p>–name my_mysql：给容器命名为 my_mysql，方便管理。<br>-e MYSQL_ROOT_PASSWORD&#x3D;my_secret_password：设置 MySQL 的 ROOT 密码为 my_secret_password。确保您将此密码设置为安全、复杂的密码。<br>-d：让容器在后台运行。<br>-p 3306:3306：将主机的 3306 端口映射到容器的 3306 端口。<br>mysql:8：指定要运行的镜像。</p></blockquote></blockquote><h2 id="设置账号及远程登录"><a href="#设置账号及远程登录" class="headerlink" title="设置账号及远程登录"></a>设置账号及远程登录</h2><h3 id="1-创建一个账号"><a href="#1-创建一个账号" class="headerlink" title="1. 创建一个账号"></a>1. 创建一个账号</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># 我使用的your <span class="hljs-keyword">user</span>是ry<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;your user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;your password&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="2-授予用户权限"><a href="#2-授予用户权限" class="headerlink" title="2. 授予用户权限"></a>2. 授予用户权限</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># 我使用的your <span class="hljs-keyword">user</span>是ry<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *,* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;your user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br></code></pre></div></td></tr></table></figure><h3 id="3-刷新权限"><a href="#3-刷新权限" class="headerlink" title="3. 刷新权限"></a>3. 刷新权限</h3><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">FLUSH PRIVILEGES<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>参数详解:</p><blockquote><p>CREATE USER ‘your_user’@‘%’ IDENTIFIED BY ‘your_password’;<br>创建一个可以从任何 IP 地址访问的用户。如果你想只允许从特定 IP 地址访问，可以将 % 替换为相应的 IP 地址，例如 ‘your_user’@‘192.168.1.100’。<br>GRANT ALL PRIVILEGES ON . TO ‘your_user’@‘%’ WITH GRANT OPTION;<br>授予用户在所有数据库和表上的所有权限，并允许该用户授予其他用户权限。</p></blockquote></blockquote><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p><img src="/2025/02/16/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%938-0/mysql.png" alt="mysql"></p><h2 id="运行sql"><a href="#运行sql" class="headerlink" title="运行sql"></a>运行sql</h2><ul><li>地址:<ul><li>ruoyi-&gt;sql-&gt;quartz.sql</li><li>ruoyi-&gt;sql-&gt;ry_20240601.sql</li></ul></li><li>运行这两个sql</li></ul>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依框架学习(一)</title>
    <link href="/2025/02/15/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <url>/2025/02/15/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>学习这个是为了增加自己技术水平,还有就是后台管理系统做好还是有拿到私活的资本的.</p></blockquote><h2 id="若依简介"><a href="#若依简介" class="headerlink" title="若依简介"></a><a href="https://www.ruoyi.vip/">若依简介</a></h2><blockquote><h3 id="平台简介"><a href="#平台简介" class="headerlink" title="平台简介"></a>平台简介</h3><p>一直想做一款后台管理系统，看了很多优秀的开源项目但是发现没有合适的。于是利用空闲休息时间开始自己写了一套后台系统。如此有了若依。她可以用于所有的Web应用程序，如网站管理后台，网站会员中心，CMS，CRM，OA。所有前端后台代码封装过后十分精简易上手，出错概率低。同时支持移动客户端访问。系统会陆续更新一些实用功能。</p><h3 id="内置功能"><a href="#内置功能" class="headerlink" title="内置功能"></a>内置功能</h3><p>用户管理：用户是系统操作者，该功能主要完成系统用户配置。<br>部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数&gt; 据权限。<br>岗位管理：配置系统用户所属担任职务。<br>菜单管理：配置系统菜单，操作权限，按钮权限标识等。<br>角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。<br>字典管理：对系统中经常使用的一些较为固定的数据进行维护。<br>参数管理：对系统动态配置常用参数。<br>通知公告：系统通知公告信息发布维护。<br>操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。<br>登录日志：系统登录日志记录查询包含登录异常。<br>在线用户：当前系统中活跃用户状态监控。<br>定时任务：在线（添加、修改、删除)任务调度包含执行结果日志。<br>代码生成：前后端代码的生成（java、html、xml、sql）支持CRUD下载 。<br>系统接口：根据业务代码自动生成相关的api接口文档。<br>服务监控：监视当前系统CPU、内存、磁盘、堆栈等相关信息。<br>缓存监控：对系统的缓存信息查询，命令统计等。<br>在线构建器：拖动表单元素生成相应的HTML代码。<br>连接池监视：监视当前系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。</p></blockquote><h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><blockquote><p>我选择的是前后端不分离版本,接私活足够了,还能节约学习成本.</p></blockquote><h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p>开发工具 idea</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/y_project/</span>RuoYi.git<br></code></pre></div></td></tr></table></figure><blockquote><p>配置你idea的maven<br>配置java版本</p></blockquote><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p><a href="https://digitalpartty.github.io/2025/02/16/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%938-0/">使用docker安装MySQL数据库8.0</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#docker自定义安装位置命令</span><br>start/w <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;Docker Desktop Installer.exe&quot;</span> install -accept -license --installation-dir=<span class="hljs-string">&quot;E:\Docker\Docker&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="运行文件"><a href="#运行文件" class="headerlink" title="运行文件"></a>运行文件</h2><p>运行:RuoYiApplication<br>访问地址:<a href="http://localhost/">http://localhost</a><br>swagger地址:<a href="http://localhost/swagger-ui/index.html#/test-controller">http://localhost/swagger-ui/index.html#/test-controller</a></p>]]></content>
    
    
    <categories>
      
      <category>若依</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>js</tag>
      
      <tag>maven</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 使用指南</title>
    <link href="/2025/01/11/Nginx%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/01/11/Nginx%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Nginx 是一款功能强大的服务器软件，它既是 HTTP Web 服务器，又可充当反向代理、内容缓存、负载均衡器、TCP&#x2F;UDP 代理服务器以及邮件代理服务器。最初由 Igorsysoev 编写。</p><h2 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h2><ul><li><a href="https://nginx.org/en/download.html">Nginx 下载地址</a><br>-<img src="/2025/01/11/Nginx%E4%BD%BF%E7%94%A8/nginx1.png" alt="nginx1.png"></li></ul><p>请根据您的需求选择合适的版本进行下载。</p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><h3 id="（一）Windows-系统下安装-Nginx"><a href="#（一）Windows-系统下安装-Nginx" class="headerlink" title="（一）Windows 系统下安装 Nginx"></a>（一）Windows 系统下安装 Nginx</h3><ul><li>解压下载的 <code>nginx - 1.24.0.zip</code> 文件。</li><li>双击 <code>nginx.exe</code> 启动。</li></ul><h3 id="（二）Linux-系统下安装-Nginx"><a href="#（二）Linux-系统下安装-Nginx" class="headerlink" title="（二）Linux 系统下安装 Nginx"></a>（二）Linux 系统下安装 Nginx</h3><ul><li><strong>步骤一：安装依赖项</strong></li></ul><p>一键安装以下四个依赖：</p><p><code>yum - y install gcc zlib zlib - devel pcre - devel openssl openssl - devel</code></p><ul><li><strong>步骤二：下载并解压</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /usr/local<br><span class="hljs-attribute">mkdir</span> nginx<br><span class="hljs-attribute">cd</span> nginx<br><span class="hljs-attribute">wget</span> http://nginx.org/download/nginx - <span class="hljs-number">1</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.tar.gz<br><span class="hljs-attribute">tar</span> - xvf nginx - <span class="hljs-number">1</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.tar.gz<br></code></pre></div></td></tr></table></figure><ul><li><strong>步骤三：安装 Nginx</strong></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span> 进入 nginx 目录<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx</span><br><span class="hljs-string">//</span> 进入目录<br><span class="hljs-keyword">cd</span> nginx - 1.24.0<br><span class="hljs-string">//</span> 执行配置命令<br><span class="hljs-string">./configure</span><br><span class="hljs-string">//</span> 执行 make 命令<br>make<br><span class="hljs-string">//</span> 执行 make install 命令<br>make install<br></code></pre></div></td></tr></table></figure><ul><li><strong>步骤四：启动 Nginx</strong></li></ul><p><code>/usr/local/nginx/sbin/nginx - c /usr/local/nginx/conf/nginx.conf</code></p><h2 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h2><ul><li><strong>检查配置文件</strong>：使用 <code>nginx - t</code> 命令。</li><li><strong>重启配置（修改配置文件后使用）</strong>：执行 <code>nginx - s reload</code>。</li><li><strong>停止 Nginx</strong>：使用 <code>nginx - s stop</code>。</li><li><strong>启动 Nginx</strong>：使用 <code>nginx - s start</code>。</li></ul><h2 id="五、配置文件"><a href="#五、配置文件" class="headerlink" title="五、配置文件"></a>五、配置文件</h2><h3 id="（一）配置文件位置"><a href="#（一）配置文件位置" class="headerlink" title="（一）配置文件位置"></a>（一）配置文件位置</h3><ul><li><strong>Windows</strong>：<code>nginx - 1.24.0\conf\nginx.conf</code>。</li><li><strong>Linux</strong>：<code>/nginx/conf/nginx.conf</code>。</li></ul><h3 id="（二）基本结构"><a href="#（二）基本结构" class="headerlink" title="（二）基本结构"></a>（二）基本结构</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-attribute">error_log</span>  /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;<br><span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet - stream;<br><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="（三）全局指令"><a href="#（三）全局指令" class="headerlink" title="（三）全局指令"></a>（三）全局指令</h3><ul><li><strong>user</strong>：用于指定 Nginx 进程的运行用户，默认值通常是 <code>nginx</code>。</li><li><strong>worker_processes</strong>：指定 Nginx 的工作进程数量。依据服务器的 CPU 核心数来设置此参数可提升性能。</li><li><strong>error_log</strong>：定义错误日志文件的位置和日志级别，日志级别包括 <code>debug</code>、<code>info</code>、<code>notice</code>、<code>warn</code>、<code>error</code>、<code>crit</code> 等。</li><li><strong>pid</strong>：指定存放 Nginx 进程 ID 文件的位置。</li></ul><h3 id="（四）事件模块"><a href="#（四）事件模块" class="headerlink" title="（四）事件模块"></a>（四）事件模块</h3><ul><li><strong>worker_connections</strong>：每个工作进程能够同时处理的最大连接数。它与 <code>worker_processes</code> 共同决定了 Nginx 的并发处理能力。</li></ul><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">events &#123;<br>    worker_connections  <span class="hljs-number">1024</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="（五）HTTP-模块"><a href="#（五）HTTP-模块" class="headerlink" title="（五）HTTP 模块"></a>（五）HTTP 模块</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet - stream;<br>    <br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>include</strong>：用于包含其他配置文件。<code>/etc/nginx/mime.types</code> 定义了 MIME 类型，<code>/nginx/conf.d/*.conf</code> 包含了其他子配置文件。</li><li><strong>default_type</strong>：设置默认的 MIME 类型。</li><li><strong>log_format</strong>：定义日志格式。</li><li><strong>access_log</strong>：指定访问日志文件的位置以及所使用的日志格式。</li><li><strong>sendfile</strong>：启用高效的文件传输模式，默认开启。</li><li><strong>keepalive_timeout</strong>：定义客户端连接保持活动的时间。</li></ul><h3 id="（六）Server-模块"><a href="#（六）Server-模块" class="headerlink" title="（六）Server 模块"></a>（六）Server 模块</h3><p>在 http 模块中，server 块用于定义虚拟主机配置：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br>    <span class="hljs-keyword">listen</span>       <span class="hljs-number">80</span>;<br>    server_name  localhost;<br><br>    <span class="hljs-keyword">location</span> / &#123;<br>        root   /usr/<span class="hljs-keyword">share</span>/nginx/html;<br>        <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>    &#125;<br><br>    error_page  <span class="hljs-number">404</span>              /<span class="hljs-number">404.</span>html;<br>    <span class="hljs-keyword">location</span> = /<span class="hljs-number">404.</span>html &#123;<br>        <span class="hljs-type">internal</span>;<br>    &#125;<br><br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>        <span class="hljs-type">internal</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>listen</strong>：定义服务器监听的端口。</li><li><strong>server_name</strong>：定义虚拟主机名。</li><li><strong>location</strong>：用于匹配 URI，以此来确定请求的处理方式。</li><li><strong>root</strong>：设置请求的根目录。</li><li><strong>index</strong>：定义默认的索引文件。</li><li><strong>error_page</strong>：指定错误页面。例如，当发生 404 错误时，跳转到 <code>/404.html</code>。</li></ul><h3 id="（七）Location-指令"><a href="#（七）Location-指令" class="headerlink" title="（七）Location 指令"></a>（七）Location 指令</h3><p>location 指令用于匹配请求 URI，可依据不同的匹配规则来处理请求。</p><ul><li><strong>精确匹配</strong>：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">location</span> <span class="hljs-operator">=</span> / &#123;<br>    // 精确匹配相关配置<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>前缀匹配</strong>：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/images</span>/ &#123;<br>    // 前缀匹配相关配置<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>正则匹配</strong>：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">~* \.(gif</span>|jpg|jpeg)$ &#123;<br>    // 正则匹配相关配置<br>&#125;<br></code></pre></div></td></tr></table></figure><p>匹配优先级顺序为：精确匹配 &gt; 正则匹配 &gt; 前缀匹配。</p><h3 id="（八）反向代理配置"><a href="#（八）反向代理配置" class="headerlink" title="（八）反向代理配置"></a>（八）反向代理配置</h3><p>反向代理是 Nginx 的常用功能之一。通过将 Nginx 配置为反向代理服务器，可实现负载均衡、缓存、SSL 终止等功能。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  example.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://backend_server;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X - Real - IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X - Forwarded - For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X - Forwarded - Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>proxy_pass</strong>：指定后端服务器的地址。</li><li><strong>proxy_set_header</strong>：用于设置请求头信息，例如传递客户端的真实 IP 地址等。</li></ul><h3 id="（九）负载均衡配置"><a href="#（九）负载均衡配置" class="headerlink" title="（九）负载均衡配置"></a>（九）负载均衡配置</h3><p>Nginx 支持多种负载均衡策略，包括轮询、IP 哈希、最少连接等。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-section">upstream</span> backend &#123;<br>        <span class="hljs-attribute">server</span> backend1.example.com;<br>        <span class="hljs-attribute">server</span> backend2.example.com;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  example.com;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://backend;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>upstream</strong>：定义后端服务器组。</li><li><strong>proxy_pass</strong>：将请求转发到后端服务器组。</li></ul><h3 id="（十）配置-ssl-证书"><a href="#（十）配置-ssl-证书" class="headerlink" title="（十）配置 ssl 证书"></a>（十）配置 ssl 证书</h3><p>一般而言，我的证书存放在 <code>nginx/conf/cert/域名/</code> 目录下。例如，若域名是 <code>baidu.com</code>，则 <code>ssl_certificate_key</code> 的位置是 <code>nginx/conf/cert/baidu.com/privkey.pem</code>，<code>ssl_certificate</code> 的位置是 <code>nginx/conf/cert/baidu.com/fullchain.pem</code>。</p><h4 id="1-前端页面配置"><a href="#1-前端页面配置" class="headerlink" title="1. 前端页面配置"></a>1. 前端页面配置</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    server_name baidu.com;<br>    <span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.php <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm <span class="hljs-keyword">default</span>.php <span class="hljs-keyword">default</span>.htm <span class="hljs-keyword">default</span>.html;<br>    add_header <span class="hljs-keyword">Cache</span> - Control &quot;no - <span class="hljs-keyword">cache</span>, no - store&quot;;<br>    root /www/wwwroot/baidu/front; // 前端文件地址<br>    <br>    // SSL - START SSL 相关配置<br>    ssl_certificate    cert/baidu.com/fullchain.pem;<br>    ssl_certificate_key    cert/baidu.com/privkey.pem;<br>    ssl_protocols TLSv1<span class="hljs-number">.1</span> TLSv1<span class="hljs-number">.2</span> TLSv1<span class="hljs-number">.3</span>;<br>    ssl_ciphers EECDH + CHACHA20:EECDH + CHACHA20 - draft:EECDH + AES128:RSA + AES128:EECDH + AES256:RSA + AES256:EECDH + <span class="hljs-number">3</span>DES:RSA + <span class="hljs-number">3</span>DES:!MD5;<br>    ssl_prefer_server_ciphers <span class="hljs-keyword">on</span>;<br>    ssl_session_cache shared:SSL:<span class="hljs-number">10</span>m;<br>    ssl_session_timeout <span class="hljs-number">10</span>m;<br>    add_header <span class="hljs-keyword">Strict</span> - Transport - <span class="hljs-keyword">Security</span> &quot;max - age = 31536000&quot;;<br>    error_page <span class="hljs-number">497</span> https://$host$<span class="language-pgsql">request_uri;</span><br><span class="language-pgsql">    // SSL - <span class="hljs-keyword">END</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // ERROR - PAGE - <span class="hljs-keyword">START</span> 错误页配置</span><br><span class="language-pgsql">    // error_page <span class="hljs-number">404</span> /<span class="hljs-number">404.</span>html;</span><br><span class="language-pgsql">    // error_page <span class="hljs-number">502</span> /<span class="hljs-number">502.</span>html;</span><br><span class="language-pgsql">    // ERROR - PAGE - <span class="hljs-keyword">END</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // PHP - <span class="hljs-keyword">INFO</span> - <span class="hljs-keyword">START</span> PHP 引用配置</span><br><span class="language-pgsql">    <span class="hljs-keyword">include</span> <span class="hljs-keyword">enable</span> - php - <span class="hljs-number">00.</span>conf;</span><br><span class="language-pgsql">    // PHP - <span class="hljs-keyword">INFO</span> - <span class="hljs-keyword">END</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // REWRITE - <span class="hljs-keyword">START</span> URL 重写规则引用</span><br><span class="language-pgsql">    <span class="hljs-keyword">include</span> /www/<span class="hljs-keyword">server</span>/panel/vhost/rewrite/baidu.com.conf;</span><br><span class="language-pgsql">    // REWRITE - <span class="hljs-keyword">END</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // 禁止访问的文件或目录</span><br><span class="language-pgsql">    <span class="hljs-keyword">location</span> ~ ^/(\.<span class="hljs-keyword">user</span>.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md) &#123;</span><br><span class="language-pgsql">        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;</span><br><span class="language-pgsql">    &#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // 一键申请 SSL 证书验证目录相关设置</span><br><span class="language-pgsql">    <span class="hljs-keyword">location</span> ~ /\.well - known &#123;</span><br><span class="language-pgsql">        allow <span class="hljs-keyword">all</span>;</span><br><span class="language-pgsql">    &#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    // 禁止在证书验证目录放入敏感文件</span><br><span class="language-pgsql">    <span class="hljs-keyword">if</span> ($uri ~ &quot;^/\.well - known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$&quot;) &#123;</span><br><span class="language-pgsql">        <span class="hljs-keyword">return</span> <span class="hljs-number">403</span>;</span><br><span class="language-pgsql">    &#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    <span class="hljs-keyword">location</span> ~.*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="language-pgsql">        expires <span class="hljs-number">30</span>d;</span><br><span class="language-pgsql">        error_log /dev/<span class="hljs-keyword">null</span>;</span><br><span class="language-pgsql">        access_log /dev/<span class="hljs-keyword">null</span>;</span><br><span class="language-pgsql">    &#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    <span class="hljs-keyword">location</span> ~.*\.(js|css)?$ &#123;</span><br><span class="language-pgsql">        expires <span class="hljs-number">12</span>h;</span><br><span class="language-pgsql">        error_log /dev/<span class="hljs-keyword">null</span>;</span><br><span class="language-pgsql">        access_log /dev/<span class="hljs-keyword">null</span>;</span><br><span class="language-pgsql">    &#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    access_log /www/wwwlogs/baidu.com.<span class="hljs-keyword">log</span>;</span><br><span class="language-pgsql">    error_log /www/wwwlogs/baidu.com.error.<span class="hljs-keyword">log</span>;</span><br><span class="language-pgsql">&#125;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>ssl_certificate</strong> 和 <strong>ssl_certificate_key</strong>：分别指定 SSL 证书和私钥的路径。</li><li><strong>ssl_protocols</strong>：指定支持的 SSL&#x2F;TLS 协议版本。</li><li><strong>ssl_ciphers</strong>：指定支持的加密套件。</li><li><strong>ssl_prefer_server_ciphers</strong>：优先使用服务器端的加密套件。</li><li><strong>ssl_session_cache</strong>：设置 SSL 会话缓存。</li><li><strong>ssl_session_timeout</strong>：设置 SSL 会话超时时间。</li><li><strong>add_header</strong> 和 <strong>Strict - Transport - Security</strong>：添加 HSTS 头，强制浏览器使用 HTTPS。</li><li><strong>error_page</strong>：为 497 错误码设置重定向，497 错误码通常表示客户端不支持 SSL。</li></ul><h4 id="2-后端端口配置"><a href="#2-后端端口配置" class="headerlink" title="2. 后端端口配置"></a>2. 后端端口配置</h4><p>对于后端配置，19988 是监听端口，18888 是后端接口。</p><figure class="highlight tp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tp">server &#123;<br>    listen <span class="hljs-number">19988</span> ssl http<span class="hljs-number">2</span>;<br>    server_name baidu.com;<br>    <br>    <span class="hljs-comment">// SSL - START SSL 相关配置</span><br><span class="hljs-comment">    ssl_certificate    cert/baidu.com/fullchain.pem;</span><br>    ssl_certificate_key    cert/baidu.com/privkey.pem;<br>    <br>    location / &#123;<br>        proxy_pass http:<span class="hljs-comment">//localhost:18888;</span><br>        proxy_set_header Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br>        proxy_set_header <span class="hljs-keyword">X</span> - Real - IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header <span class="hljs-keyword">X</span> - Forwarded - For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_set_header REMOTE - HOST <span class="hljs-variable">$remote_addr</span>;<br>        add_header <span class="hljs-keyword">X</span> - Cache <span class="hljs-variable">$upstream_cache_status</span>;<br>        proxy_set_header <span class="hljs-keyword">X</span> - Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br>        proxy_set_header <span class="hljs-keyword">X</span> - Scheme <span class="hljs-variable">$scheme</span>;<br>        proxy_connect_timeout <span class="hljs-number">30</span>s;<br>        proxy_read_timeout <span class="hljs-number">86400</span>s;<br>        proxy_send_timeout <span class="hljs-number">30</span>s;<br>        proxy_http_version <span class="hljs-number">1</span><span class="hljs-number">.1</span>;<br>        proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        proxy_set_header Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用老家宽带搭建服务器</title>
    <link href="/2024/12/13/%E5%88%A9%E7%94%A8%E8%80%81%E5%AE%B6%E5%AE%BD%E5%B8%A6%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/12/13/%E5%88%A9%E7%94%A8%E8%80%81%E5%AE%B6%E5%AE%BD%E5%B8%A6%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu24.04解决向日葵安装libgconf-2-4依赖问题</title>
    <link href="/2024/12/02/Ubuntu24-04%E8%A7%A3%E5%86%B3%E5%90%91%E6%97%A5%E8%91%B5%E5%AE%89%E8%A3%85libgconf-2-4%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/02/Ubuntu24-04%E8%A7%A3%E5%86%B3%E5%90%91%E6%97%A5%E8%91%B5%E5%AE%89%E8%A3%85libgconf-2-4%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近在加装的ssd上加装了个Ubuntu，当然要装最新的长期支持稳定版啦，24.04.1，却发现常用的向日葵不好安装成功，即使是官方的说明，应该是用这个版本系统的人还不多。<br>找到了一个帅哥的解决方案，是可行的<br>但是文章是直接添加source源的方式，我担心后续会影响稳定性，毕竟ubuntu本身的稳定性不那么好，有人认为它是Debian+bugs，当然观点有点偏激啦！</p><p>我是手动解决依赖的，这里记录下，方便当下的安装，未来ubuntu官方可能会更新，这个方法或许就没必要了，大家注意。<br>以下是详细过程，当然通过浏览器下载后，双击依次安装也是可以的。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://kr.archive.ubuntu.com/ubuntu/pool/universe/g/gconf/gconf2-common_3.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">7</span>ubuntu2_all.deb<br><span class="hljs-attribute">wget</span> http://kr.archive.ubuntu.com/ubuntu/pool/universe/g/gconf/libgconf-<span class="hljs-number">2</span>-<span class="hljs-number">4</span>_3.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">7</span>ubuntu2_amd64.deb<br><span class="hljs-attribute">wget</span> https://dw.oray.com/sunlogin/linux/SunloginClient_<span class="hljs-number">15.2.0.630</span>64_amd64.deb<br> <span class="hljs-attribute">sudo</span> dpkg -i  gconf2-common_3.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">7</span>ubuntu2_all.deb <br> <span class="hljs-attribute">sudo</span> dpkg -i  libgconf-<span class="hljs-number">2</span>-<span class="hljs-number">4</span>_3.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">7</span>ubuntu2_amd64.deb <br> <span class="hljs-attribute">sudo</span> dpkg -i SunloginClient_<span class="hljs-number">15.2.0.630</span>64_amd64.deb <br></code></pre></div></td></tr></table></figure><p>如果有更好的方案，欢迎交流！<br>————————————————</p><div class="hljs code-wrapper"><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。                    </code></pre></div><p>原文链接：<a href="https://blog.csdn.net/zd200572/article/details/143835798">https://blog.csdn.net/zd200572/article/details/143835798</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置端口配置</title>
    <link href="/2024/11/19/nginx%E9%85%8D%E7%BD%AE%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/11/19/nginx%E9%85%8D%E7%BD%AE%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ul><li>使用yum命令安装nginx<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nginx<br></code></pre></div></td></tr></table></figure></li><li>安装完成后的目录<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>nginx/                  <span class="hljs-comment"># 主配置文件目录</span><br>├── conf.d/                  <span class="hljs-comment"># 子配置文件目录</span><br>│   └── default.conf         <span class="hljs-comment"># 默认站点配置文件</span><br>├── mime.types               <span class="hljs-comment"># MIME 类型映射文件</span><br>└── nginx.conf               <span class="hljs-comment"># 主配置文件</span><br><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html/       <span class="hljs-comment"># 默认网站根目录</span><br>├── <span class="hljs-number">404</span>.html                 <span class="hljs-comment"># 404 错误页面</span><br>├── <span class="hljs-number">50</span>x.html                 <span class="hljs-comment"># 50x 错误页面</span><br>└── index.html               <span class="hljs-comment"># 默认首页</span><br><br><span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/nginx/</span>            <span class="hljs-comment"># 缓存目录</span><br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>              <span class="hljs-comment"># 日志目录</span><br>├── access.log               <span class="hljs-comment"># 访问日志</span><br>└── error.log                <span class="hljs-comment"># 错误日志</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h3><ul><li>启动开机自启<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> nginx<br></code></pre></div></td></tr></table></figure></li><li>查看自启状态<figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">sudo systemctl <span class="hljs-keyword">is</span>-enabled nginx<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h2><ul><li>修改<code>/etc/nginx/nginx.conf</code>文件<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># For more information on configuration, see:</span><br><span class="hljs-comment">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="hljs-comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><br><span class="hljs-attribute">user</span> nginx;<br><span class="hljs-attribute">worker_processes</span> auto;<br><span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log;<br><span class="hljs-attribute">pid</span> /run/nginx.pid;<br><br><span class="hljs-comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="hljs-attribute">include</span> /usr/share/nginx/modules/<span class="hljs-regexp">*.conf</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-comment"># rabbitmq配置</span><br><span class="hljs-section">stream</span> &#123;<br>   <br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-comment"># 前置机端口15672</span><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">15672</span>;<br>        <span class="hljs-comment"># 转发到服务器5672</span><br>        <span class="hljs-attribute">proxy_pass</span> <span class="hljs-number">39.0.0.0:15672</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>            <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nopush</span>          <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nodelay</span>         <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>   <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">4096</span>;<br><br>    <span class="hljs-attribute">include</span>             /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>        application/octet-stream;<br><br>    <span class="hljs-comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span><br>    <span class="hljs-comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span><br>    <span class="hljs-comment"># for more information.</span><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">listen</span>       [::]:<span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  _;<br>        <span class="hljs-attribute">root</span>         /usr/share/nginx/html;<br><br>        <span class="hljs-comment"># Load configuration files for the default server block.</span><br>        <span class="hljs-attribute">include</span> /etc/nginx/default.d/<span class="hljs-regexp">*.conf</span>;<br><br>        <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;<br>            <span class="hljs-section">location</span> = /40x.html &#123;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;<br>            <span class="hljs-section">location</span> = /50x.html &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-comment"># 监听前置机19003</span><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">19003</span>;<br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-comment"># 内网服务器9003 或者 网闸9003</span><br>            <span class="hljs-attribute">proxy_pass</span>  http://192.168.16.230:9003/;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-comment"># 18172</span><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">18172</span>;<br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-comment"># 内网服务器8172 或者 网闸8172</span><br>            <span class="hljs-attribute">proxy_pass</span>  http://192.168.16.230:8172/;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment"># Settings for a TLS enabled server.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    server &#123;</span><br><span class="hljs-comment">#        listen       443 ssl http2;</span><br><span class="hljs-comment">#        listen       [::]:443 ssl http2;</span><br><span class="hljs-comment">#        server_name  _;</span><br><span class="hljs-comment">#        root         /usr/share/nginx/html;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="hljs-comment">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="hljs-comment">#        ssl_session_cache shared:SSL:1m;</span><br><span class="hljs-comment">#        ssl_session_timeout  10m;</span><br><span class="hljs-comment">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class="hljs-comment">#        ssl_prefer_server_ciphers on;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        # Load configuration files for the default server block.</span><br><span class="hljs-comment">#        include /etc/nginx/default.d/*.conf;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        error_page 404 /404.html;</span><br><span class="hljs-comment">#            location = /40x.html &#123;</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        error_page 500 502 503 504 /50x.html;</span><br><span class="hljs-comment">#            location = /50x.html &#123;</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h2><ul><li>查看已开放端口<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">sudo firewall-cmd <span class="hljs-comment">--list-all</span><br></code></pre></div></td></tr></table></figure></li><li>开放端口<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-port=15672/tcp<br><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-port=18172/tcp<br><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-port=19003/tcp<br></code></pre></div></td></tr></table></figure></li><li>重载防火墙<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">sudo firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></div></td></tr></table></figure></li><li>再次查看,验证是否开放成功<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">sudo firewall-cmd <span class="hljs-comment">--list-all</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows用docker安装centos</title>
    <link href="/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/"/>
    <url>/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/</url>
    
    <content type="html"><![CDATA[<h2 id="安装docker-desktop"><a href="#安装docker-desktop" class="headerlink" title="安装docker desktop"></a>安装docker desktop</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote><p><a href="https://docs.docker.com/desktop/setup/install/windows-install/">下载地址</a></p></blockquote><p><img src="/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/docker1.png" alt="图片"></p><blockquote><p>安装完重启系统,会提示你让你登录,可以选择不登录.会提示你更新wsl,否则不能打开dockerDesktop</p></blockquote><h2 id="安装centos"><a href="#安装centos" class="headerlink" title="安装centos"></a>安装centos</h2><h3 id="拉取centos镜像"><a href="#拉取centos镜像" class="headerlink" title="拉取centos镜像"></a>拉取centos镜像</h3><ul><li>命令拉取镜像<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 拉取centos版本为centos7的系统镜像</span><br><span class="hljs-attribute">docker</span> pull centos:centos7<br></code></pre></div></td></tr></table></figure><blockquote><p>如果报没有此命令,检查环境配置变量</p></blockquote></li><li>查看镜像<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 查看已有镜像</span><br><span class="hljs-attribute">docker</span> images<br></code></pre></div></td></tr></table></figure></li><li>在desktop的image中查看<br><img src="/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/docker2.png" alt="图片"></li></ul><h2 id="设置centos"><a href="#设置centos" class="headerlink" title="设置centos"></a>设置centos</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><blockquote><p>这里面包含两块，一个是启动容器，另外一个是启动完还需要进入容器里边去</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 指定镜像启动一个容器</span><br>docker run -itd -p &#123;本地机器端口号&#125;:&#123;容器内操作系统端口号&#125; --name &#123;起一个容器名&#125; --privileged=<span class="hljs-literal">true</span> &#123;镜像名&#125;:&#123;镜像tag&#125; /usr/sbin/init<br><span class="hljs-comment"># 进入到容器内的操作系统</span><br>docker <span class="hljs-built_in">exec</span> -it &#123;容器名&#125; /bin/bash<br></code></pre></div></td></tr></table></figure><ul><li>举个例子:<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将容器内centos7的22端口映射成本地机器的10022端口，目的是为了本地能访问到容器内的端口搞事情</span><br>docker run -itd -p 10022:22 --name momo --privileged=<span class="hljs-literal">true</span> centos:centos7 /usr/sbin/init<br><span class="hljs-comment"># 进入容器内</span><br>docker <span class="hljs-built_in">exec</span> -it momo /bin/bash<br></code></pre></div></td></tr></table></figure><img src="/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/docker3.png" alt="图片"></li><li>装些常用工具<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># root用户</span><br>yum <span class="hljs-keyword">install</span> -y net-tools<br><span class="hljs-comment"># 接着安装openssl，openssh-server</span><br>yum <span class="hljs-keyword">install</span> -y openssl openssh-server<br></code></pre></div></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 启动ssh</span><br><span class="hljs-regexp">/usr/</span>sbin/sshd -D<br></code></pre></div></td></tr></table></figure>报错:<br><img src="/2024/11/18/Windows%E7%94%A8docker%E5%AE%89%E8%A3%85centos/docker4.png" alt="图片"><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 运行以下命令</span><br>ssh-keygen -q -t rsa -b <span class="hljs-number">2048</span> -f <span class="hljs-regexp">/etc/</span>ssh/ssh_host_rsa_key -N <span class="hljs-string">&#x27;&#x27;</span>  <br>ssh-keygen -q -t ecdsa -f <span class="hljs-regexp">/etc/</span>ssh/ssh_host_ecdsa_key -N <span class="hljs-string">&#x27;&#x27;</span><br>ssh-keygen -t dsa -f <span class="hljs-regexp">/etc/</span>ssh/ssh_host_ed25519_key -N <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure></li><li>修改配置文件<blockquote><p>配置文件路径为 <code>/etc/ssh/sshd_config</code></p><ol><li>将 Port 22 前面的注释去掉（开启22号端口）</li><li>将 PermitRootLogin的值改为 yes （这里是设置是否允许root用户登录，可根据自己需求决定是否开启）</li><li>重新启动ssh,如果设置都没问题的话，命令结尾加个‘&amp;’，自动后台运行，启动成功会返回进程号</li></ol></blockquote></li><li>给root添加密码,添加过的可跳过此步骤<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> passwd<br>passwd<br></code></pre></div></td></tr></table></figure></li><li>设置开机自启<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /start-sshd.sh</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">/usr/sbin/sshd -D</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">chmod</span> +x /start-sshd.sh<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="用ssh工具连接centos"><a href="#用ssh工具连接centos" class="headerlink" title="用ssh工具连接centos"></a>用ssh工具连接centos</h2><ul><li>连接ip(本机的话127.0.0.1:10022)</li><li>输入设置好的用户名和密码</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java生成PDF</title>
    <link href="/2024/11/15/Java%E7%94%9F%E6%88%90PDF/"/>
    <url>/2024/11/15/Java%E7%94%9F%E6%88%90PDF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>需求来源:需要为系统生成年度报告的pdf,用于工作人员报告工作情况.<br>技术选型:因为有图表和一些样式,领导想要看着舒服的,所以选择thymeleaf来进行前端渲染.</p></blockquote><h2 id="wkhtmltopdf"><a href="#wkhtmltopdf" class="headerlink" title="wkhtmltopdf"></a>wkhtmltopdf</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>wkthlt topdf和 wkthltoimage是开源(LGPLV3)命令行工具，使用 Ot WebKit 渲染引擎将 HTML 渲染为 PDF 和各种图像格式。</p></blockquote><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://wkhtmltopdf.org/downloads.html">下载地址</a><br><img src="/2024/11/15/Java%E7%94%9F%E6%88%90PDF/pdf1.png" alt="下载页面"></p><blockquote><p>选择你需要的版本,我使用的<code>WindowsInstaller (Vista or later)64-bit</code>和<code>CentOS7x86_64</code></p></blockquote><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h3><ul><li>双击<code>wkhtmltox-0.12.6-1.msvc2015-win64.exe</code><br><img src="/2024/11/15/Java%E7%94%9F%E6%88%90PDF/pdf2.png" alt="下载页面"><br><img src="/2024/11/15/Java%E7%94%9F%E6%88%90PDF/pdf3.png" alt="下载页面"></li></ul><h3 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h3><ul><li>下载命令<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/wkhtmltopdf/packaging/releases/download/<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>/wkhtmltox-<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.centos7.x86_64.rpm<br></code></pre></div></td></tr></table></figure></li><li>安装依赖<figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span><span class="hljs-keyword">xorg-x11-fonts-75dpi </span><span class="hljs-keyword">xorg-x11-fonts-Type1 </span>libXrender -y<br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">yum update -<span class="hljs-attribute">y</span><br>yum install -<span class="hljs-attribute">y</span> libXext libjpeg<br></code></pre></div></td></tr></table></figure></li><li>rpm安装<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh wkhtmltox-<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.centos7.x86_64.rpm<br></code></pre></div></td></tr></table></figure></li><li>测试<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wkhtmltopdf https:<span class="hljs-regexp">//</span>wkhtmltopdf.org<span class="hljs-regexp">/downloads.html ./</span>wk.pdf<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h2><blockquote><p>我是在就项目上增加的,你可以新建一个测试项目进行测试</p></blockquote><h3 id="Maven-pom-xml增加"><a href="#Maven-pom-xml增加" class="headerlink" title="Maven:pom.xml增加"></a>Maven:pom.xml增加</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        thymeleaf--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="application-properties文件增加"><a href="#application-properties文件增加" class="headerlink" title="application.properties文件增加"></a>application.properties文件增加</h3><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">spring.application.name=html2pdf<br>server.port=8172<br><br># thymeleaf配置<br>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-8<br>spring.thymeleaf.cache=false<br># wkhtmltopdf配置<br>pdf.wkhtmltopdfPath: D:<span class="hljs-symbol">\\</span>Program Files<span class="hljs-symbol">\\</span>wkhtmltopdf<span class="hljs-symbol">\\</span>bin<span class="hljs-symbol">\\</span>wkhtmltopdf.exe<br>pdf.myoutlinePaht: D:<span class="hljs-symbol">\\</span>workspace<span class="hljs-symbol">\\</span>test<span class="hljs-symbol">\\</span>html2pdf<span class="hljs-symbol">\\</span>src<span class="hljs-symbol">\\</span>main<span class="hljs-symbol">\\</span>resources<span class="hljs-symbol">\\</span>templates<span class="hljs-symbol">\\</span>admin<span class="hljs-symbol">\\</span>menu<span class="hljs-symbol">\\</span>myoutline.xsl<br>pdf.localPdfPath: D:<span class="hljs-symbol">\\</span>pdf<span class="hljs-symbol">\\</span><br># 这三个把localhost改为对应的服务器ip<br>pdf.srcPath: http://localhost:8172/wk2Pdf/getTemplate<br>pdf.coverUrl: http://localhost:8172/wk2Pdf/getCover<br>pdf.footerUrl: http://localhost:8172/wk2Pdf/getFooter<br></code></pre></div></td></tr></table></figure><ul><li><strong>pdf.myoutline.xsl</strong>: 目录模板</li><li><strong>pdf.wkhtmltopdfPath</strong>: wkhtmltopdf安装位置</li><li><strong>pdf.localPdfPath</strong>: 生成文件地址</li><li><strong>pdf.srcPath</strong>: 项目中主要模板地址</li><li><strong>pdf.coverUrl</strong>: 首页模板</li><li><strong>pdf.footerUrl</strong>: 页脚模板</li></ul><h3 id="Java工具类-HtmlToPdf"><a href="#Java工具类-HtmlToPdf" class="headerlink" title="Java工具类 HtmlToPdf"></a>Java工具类 HtmlToPdf</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlToPdf</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wkhtmltopdfPath       wkhtmltopdf.exe路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> myoutlinePaht         目录路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcPath               生成PDF地址或者路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> destPath              生成本地的路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> coverUrl              coverUrl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> footerUrl             footerUrl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">convert</span><span class="hljs-params">(String wkhtmltopdfPath, String myoutlinePaht, String srcPath, String destPath, String coverUrl,String footerUrl)</span>&#123;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(destPath);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> file.getParentFile();<br>        <span class="hljs-comment">//如果pdf保存路径不存在，则创建路径</span><br>        <span class="hljs-keyword">if</span>(!parent.exists())&#123;<br>            parent.mkdirs();<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        cmd.append(wkhtmltopdfPath);<br>        cmd.append(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">//        cmd.append(&quot; --header-line&quot;);//页眉下面的线</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////cmd.append(&quot; --header-center 这里是页眉这里是页眉这里是页眉这里是页眉 &quot;);//页眉中间内容</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        cmd.append(&quot; --margin-top 3cm &quot;);//设置页面上边距 (default 10mm) </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        cmd.append(&quot; --header-html &quot;);// (添加一个HTML页眉,后面是网址)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        cmd.append(&quot; --header-spacing 5 &quot;);// (设置页眉和内容的距离,默认0)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////cmd.append(&quot; --footer-center (设置在中心位置的页脚内容)&quot;);//设置在中心位置的页脚内容</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        cmd.append(&quot; --footer-html &quot;);// (添加一个HTML页脚,后面是网址)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        cmd.append(&quot; --footer-line&quot;);//* 显示一条线在页脚内容上)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        cmd.append(&quot; --footer-spacing 5 &quot;);// (设置页脚和内容的距离)</span><br><br><br>        cmd.append(<span class="hljs-string">&quot; --disable-smart-shrinking --enable-local-file-access -B 17 -T 0 -L 0 -R 0 -d 192 &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; --page-offset -1 &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; --footer-html &quot;</span>).append(footerUrl).append(<span class="hljs-string">&quot; &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; --footer-spacing 1&quot;</span>);<br><br>        cmd.append(<span class="hljs-string">&quot; --footer-center \&quot;page\&quot; &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; cover &quot;</span>);<br>        cmd.append(coverUrl);<br>        cmd.append(<span class="hljs-string">&quot; toc --xsl-style-sheet &quot;</span>).append(myoutlinePaht).append(<span class="hljs-string">&quot; &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; --javascript-delay 1000 &quot;</span>);<br>        cmd.append(<span class="hljs-string">&quot; --encoding utf-8 &quot;</span>);<br><br><br><span class="hljs-comment">//        cmd.append(&quot; --disable-smart-shrinking --enable-local-file-access -B 15 -T 15 -L 0 -R 0 &quot;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        cmd.append(&quot; --disable-smart-shrinking &quot;);</span><br><span class="hljs-comment">//        cmd.append(&quot; cover &quot;);</span><br><span class="hljs-comment">//        cmd.append(coverUrl);</span><br><span class="hljs-comment">//        cmd.append(&quot; toc --xsl-style-sheet &quot;).append(myoutlinePaht).append(&quot; &quot;);;</span><br><span class="hljs-comment">//        cmd.append(&quot; --javascript-delay 1000 &quot;);</span><br><span class="hljs-comment">//        cmd.append(&quot; --encoding utf-8 &quot;);</span><br><span class="hljs-comment">//        cmd.append(&quot; --debug-javascript  &quot;);</span><br><br>        cmd.append(srcPath);<br><br>        cmd.append(<span class="hljs-string">&quot; &quot;</span>);<br><br>        cmd.append(destPath);<br>        log.info(<span class="hljs-string">&quot;生成命令：&quot;</span>+cmd.toString());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">proc</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd.toString());<br>            <span class="hljs-type">HtmlToPdfInterceptor</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlToPdfInterceptor</span>(proc.getErrorStream());<br>            <span class="hljs-type">HtmlToPdfInterceptor</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlToPdfInterceptor</span>(proc.getInputStream());<br>            error.start();<br>            output.start();<br>            proc.waitFor();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            result = <span class="hljs-literal">false</span>;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><span class="hljs-comment">//    wkhtmltopdf [OPTIONS]... &lt;input file&gt; [More input files] &lt;output file&gt;</span><br><span class="hljs-comment">//    常规选项</span><br><span class="hljs-comment">//         --allow &lt;path&gt;  允许加载从指定的文件夹中的文件或文件（可重复）</span><br><span class="hljs-comment">//                --book*  设置一会打印一本书的时候，通常设置的选项</span><br><span class="hljs-comment">//         --collate  打印多份副本时整理</span><br><span class="hljs-comment">//         --cookie &lt;name&gt; &lt;value&gt;  设置一个额外的cookie（可重复）</span><br><span class="hljs-comment">//                --cookie-jar &lt;path&gt;  读取和写入的Cookie，并在提供的cookie jar文件</span><br><span class="hljs-comment">//         --copies &lt;number&gt;  复印打印成pdf文件数（默认为1）</span><br><span class="hljs-comment">//                --cover* &lt;url&gt;  使用HTML文件作为封面。它会带页眉和页脚的TOC之前插入</span><br><span class="hljs-comment">//         --custom-header &lt;name&gt; &lt;value&gt;  设置一个附加的HTTP头（可重复）</span><br><span class="hljs-comment">//                --debug-javascript  显示的javascript调试输出</span><br><span class="hljs-comment">//        --default-header*  添加一个缺省的头部，与页面的左边的名称，页面数到右边，例如： --header-left &#x27;[webpage]&#x27; --header-right &#x27;[page]/[toPage]&#x27;  --header-line</span><br><span class="hljs-comment">//         --disable-external-links*  禁止生成链接到远程网页</span><br><span class="hljs-comment">//         --disable-internal-links*  禁止使用本地链接</span><br><span class="hljs-comment">//        --disable-javascript  禁止让网页执行JavaScript</span><br><span class="hljs-comment">//         --disable-pdf-compression*  禁止在PDF对象使用无损压缩</span><br><span class="hljs-comment">//         --disable-smart-shrinking*  禁止使用WebKit的智能战略收缩，使像素/ DPI比没有不变</span><br><span class="hljs-comment">//         --disallow-local-file-access  禁止允许转换的本地文件读取其他本地文件，除非explecitily允许用 --allow</span><br><span class="hljs-comment">//        --dpi &lt;dpi&gt;  显式更改DPI（这对基于X11的系统没有任何影响）</span><br><span class="hljs-comment">//                --enable-plugins  启用已安装的插件（如Flash</span><br><span class="hljs-comment">//         --encoding &lt;encoding&gt;  设置默认的文字编码</span><br><span class="hljs-comment">//         --extended-help  显示更广泛的帮助，详细介绍了不常见的命令开关</span><br><span class="hljs-comment">//         --forms*  打开HTML表单字段转换为PDF表单域</span><br><span class="hljs-comment">//        --grayscale  PDF格式将在灰阶产生</span><br><span class="hljs-comment">//        --help  Display help</span><br><span class="hljs-comment">//         --htmldoc  输出程序HTML帮助</span><br><span class="hljs-comment">//         --ignore-load-errors  忽略claimes加载过程中已经遇到了一个错误页面</span><br><span class="hljs-comment">//        --lowquality  产生低品质的PDF/ PS。有用缩小结果文档的空间</span><br><span class="hljs-comment">//         --manpage  输出程序手册页</span><br><span class="hljs-comment">//        --margin-bottom &lt;unitreal&gt;  设置页面下边距 (default 10mm)</span><br><span class="hljs-comment">//        --margin-left &lt;unitreal&gt;  将左边页边距 (default 10mm)</span><br><span class="hljs-comment">//        --margin-right &lt;unitreal&gt;  设置页面右边距 (default 10mm)</span><br><span class="hljs-comment">//        --margin-top &lt;unitreal&gt;  设置页面上边距 (default 10mm)</span><br><span class="hljs-comment">//         --minimum-font-size &lt;int&gt;  最小字体大小 (default 5)</span><br><span class="hljs-comment">//         --no-background  不打印背景</span><br><span class="hljs-comment">//        --orientation &lt;orientation&gt;  设置方向为横向或纵向</span><br><span class="hljs-comment">//         --page-height &lt;unitreal&gt;  页面高度 (default unit millimeter)</span><br><span class="hljs-comment">//         --page-offset* &lt;offset&gt;  设置起始页码 (default 1)</span><br><span class="hljs-comment">//        --page-size &lt;size&gt;  设置纸张大小: A4, Letter, etc.</span><br><span class="hljs-comment">//        --page-width &lt;unitreal&gt;  页面宽度 (default unit millimeter)</span><br><span class="hljs-comment">//         --password &lt;password&gt;  HTTP验证密码</span><br><span class="hljs-comment">//         --post &lt;name&gt; &lt;value&gt;  Add an additional post field (repeatable)</span><br><span class="hljs-comment">//         --post-file &lt;name&gt; &lt;path&gt;  Post an aditional file (repeatable)</span><br><span class="hljs-comment">//         --print-media-type*  使用的打印介质类型，而不是屏幕</span><br><span class="hljs-comment">//        --proxy &lt;proxy&gt;  使用代理</span><br><span class="hljs-comment">//        --quiet  Be less verbose</span><br><span class="hljs-comment">//        --read-args-from-stdin  读取标准输入的命令行参数</span><br><span class="hljs-comment">//        --readme  输出程序自述</span><br><span class="hljs-comment">//        --redirect-delay &lt;msec&gt;  等待几毫秒为JS-重定向(default 200)</span><br><span class="hljs-comment">//        --replace* &lt;name&gt; &lt;value&gt;  替换名称,值的页眉和页脚（可重复）</span><br><span class="hljs-comment">//                --stop-slow-scripts  停止运行缓慢的JavaScripts</span><br><span class="hljs-comment">//        --title &lt;text&gt;  生成的PDF文件的标题（第一个文档的标题使用，如果没有指定）</span><br><span class="hljs-comment">//                --toc*  插入的内容的表中的文件的开头</span><br><span class="hljs-comment">//        --use-xserver*  使用X服务器（一些插件和其他的东西没有X11可能无法正常工作）</span><br><span class="hljs-comment">//                --user-style-sheet &lt;url&gt;  指定用户的样式表，加载在每一页中</span><br><span class="hljs-comment">//        --username &lt;username&gt;  HTTP认证的用户名</span><br><span class="hljs-comment">//        --version  输出版本信息退出</span><br><span class="hljs-comment">//         --zoom &lt;float&gt;  使用这个缩放因子 (default 1)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    页眉和页脚选项</span><br><span class="hljs-comment">//        --header-center*    &lt;text&gt;    (设置在中心位置的页眉内容)</span><br><span class="hljs-comment">//        --header-font-name* &lt;name&gt;    (default Arial)  (设置页眉的字体名称)</span><br><span class="hljs-comment">//        --header-font-size* &lt;size&gt;    (设置页眉的字体大小)</span><br><span class="hljs-comment">//        --header-html*  &lt;url&gt; (添加一个HTML页眉,后面是网址)</span><br><span class="hljs-comment">//        --header-left*  &lt;text&gt;   (左对齐的页眉文本)</span><br><span class="hljs-comment">//        --header-line*      (显示一条线在页眉下)</span><br><span class="hljs-comment">//        --header-right* &lt;text&gt;    (右对齐页眉文本)</span><br><span class="hljs-comment">//        --header-spacing*   &lt;real&gt;    (设置页眉和内容的距离,默认0)</span><br><span class="hljs-comment">//        --footer-center*    &lt;text&gt;    (设置在中心位置的页脚内容)</span><br><span class="hljs-comment">//        --footer-font-name* &lt;name&gt;    (设置页脚的字体名称)</span><br><span class="hljs-comment">//        --footer-font-size* &lt;size&gt;    (设置页脚的字体大小default 11)</span><br><span class="hljs-comment">//        --footer-html*  &lt;url&gt; (添加一个HTML页脚,后面是网址)</span><br><span class="hljs-comment">//        --footer-left*  &lt;text&gt;    (左对齐的页脚文本)</span><br><span class="hljs-comment">//        --footer-line*      显示一条线在页脚内容上)</span><br><span class="hljs-comment">//        --footer-right* &lt;text&gt;    (右对齐页脚文本)</span><br><span class="hljs-comment">//        --footer-spacing*   &lt;real&gt;    (设置页脚和内容的距离)</span><br><span class="hljs-comment">//        ./wkhtmltopdf --footer-right &#x27;[page]/[topage]&#x27; http://www.baidu.com baidu.pdf</span><br><span class="hljs-comment">//        ./wkhtmltopdf --header-center &#x27;报表&#x27; --header-line --margin-top 2cm --header-line http://192.168.212.139/oma/  oma.pdf</span><br><span class="hljs-comment">//    表内容选项中</span><br><span class="hljs-comment">//         --toc-depth* &lt;level&gt;  Set the depth of the toc (default 3)</span><br><span class="hljs-comment">//         --toc-disable-back-links*  Do not link from section header to toc</span><br><span class="hljs-comment">//         --toc-disable-links*  Do not link from toc to sections</span><br><span class="hljs-comment">//         --toc-font-name* &lt;name&gt;  Set the font used for the toc (default Arial)</span><br><span class="hljs-comment">//         --toc-header-font-name* &lt;name&gt;  The font of the toc header (if unset use --toc-font-name)</span><br><span class="hljs-comment">//         --toc-header-font-size* &lt;size&gt;  The font size of the toc header (default 15)</span><br><span class="hljs-comment">//         --toc-header-text* &lt;text&gt;  The header text of the toc (default Table Of Contents)</span><br><span class="hljs-comment">//         --toc-l1-font-size* &lt;size&gt;  Set the font size on level 1 of the toc (default 12)</span><br><span class="hljs-comment">//         --toc-l1-indentation* &lt;num&gt;  Set indentation on level 1 of the toc (default 0)</span><br><span class="hljs-comment">//         --toc-l2-font-size* &lt;size&gt;  Set the font size on level 2 of the toc (default 10)</span><br><span class="hljs-comment">//         --toc-l2-indentation* &lt;num&gt;  Set indentation on level 2 of the toc (default 20)</span><br><span class="hljs-comment">//         --toc-l3-font-size* &lt;size&gt;  Set the font size on level 3 of the toc (default 8)</span><br><span class="hljs-comment">//         --toc-l3-indentation* &lt;num&gt;  Set indentation on level 3 of the toc (default 40)</span><br><span class="hljs-comment">//         --toc-l4-font-size* &lt;size&gt;  Set the font size on level 4 of the toc (default 6)</span><br><span class="hljs-comment">//         --toc-l4-indentation* &lt;num&gt;  Set indentation on level 4 of the toc (default 60)</span><br><span class="hljs-comment">//         --toc-l5-font-size* &lt;size&gt;  Set the font size on level 5 of the toc (default 4)</span><br><span class="hljs-comment">//         --toc-l5-indentation* &lt;num&gt;  Set indentation on level 5 of the toc (default 80)</span><br><span class="hljs-comment">//         --toc-l6-font-size* &lt;size&gt;  Set the font size on level 6 of the toc (default 2)</span><br><span class="hljs-comment">//         --toc-l6-indentation* &lt;num&gt;  Set indentation on level 6 of the toc (default 100)</span><br><span class="hljs-comment">//         --toc-l7-font-size* &lt;size&gt;  Set the font size on level 7 of the toc (default 0)</span><br><span class="hljs-comment">//         --toc-l7-indentation* &lt;num&gt;  Set indentation on level 7 of the toc (default 120)</span><br><span class="hljs-comment">//         --toc-no-dots*  Do not use dots, in the toc</span><br><span class="hljs-comment">//            轮廓选项</span><br><span class="hljs-comment">//         --dump-outline &lt;file&gt;  转储目录到一个文件</span><br><span class="hljs-comment">//         --outline  显示目录(文章中h1,h2来定)</span><br><span class="hljs-comment">//         --outline-depth &lt;level&gt;  设置目录的深度（默认为4）</span><br><span class="hljs-comment">//            页脚和页眉</span><br><span class="hljs-comment">//         * [page]       由当前正在打印的页的数目代替</span><br><span class="hljs-comment">//         * [frompage]   由要打印的第一页的数量取代</span><br><span class="hljs-comment">//         * [topage]     由最后一页要打印的数量取代</span><br><span class="hljs-comment">//         * [webpage]    通过正在打印的页面的URL替换</span><br><span class="hljs-comment">//         * [section]    由当前节的名称替换</span><br><span class="hljs-comment">//         * [subsection] 由当前小节的名称替换</span><br><span class="hljs-comment">//         * [date]       由当前日期系统的本地格式取代</span><br><span class="hljs-comment">//         * [time]       由当前时间，系统的本地格式取代</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlToPdfInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HtmlToPdfInterceptor</span><span class="hljs-params">(InputStream is)</span> &#123;<br>        <span class="hljs-built_in">this</span>.is = is;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(line.toString()); <span class="hljs-comment">// 输出内容</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p><img src="/2024/11/15/Java%E7%94%9F%E6%88%90PDF/pdf4.png" alt="项目目录"></p><ul><li>js,css,image引用 建议手写css,引用框架可能导致生成的pdf缺少东西<figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">js</span>/jquery.min.3.6.1.js&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">js</span>/echarts.min.5.4.0.js&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">css</span>/public.css&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">css</span>/tem.css&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">image</span>/circle.png&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li>controller接口<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.html2pdf.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.lang.UUID;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONConfig;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> com.demo.html2pdf.pojo.Project;<br><span class="hljs-keyword">import</span> com.demo.html2pdf.pojo.User;<br><span class="hljs-keyword">import</span> com.demo.html2pdf.util.HtmlToPdf;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.ModelMap;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;wk2Pdf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneratePdfController</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> HttpServletRequest request;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> HttpServletResponse response;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.wkhtmltopdfPath&#125;&quot;)</span><br>    String wkhtmltopdfPath;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.myoutlinePaht&#125;&quot;)</span><br>    String myoutlinePaht;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.localPdfPath&#125;&quot;)</span><br>    String localPdfPath;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.srcPath&#125;&quot;)</span><br>    String srcPath;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.coverUrl&#125;&quot;)</span><br>    String coverUrl;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pdf.footerUrl&#125;&quot;)</span><br>    String footerUrl;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/generatePdf&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generatePdf</span><span class="hljs-params">(Integer annualId, Integer type)</span>&#123;<br><span class="hljs-comment">//在配置文件中配置localPdfPath路径，拼接模板路径和名字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pdfName</span> <span class="hljs-operator">=</span> UUID.randomUUID() + <span class="hljs-string">&quot;.pdf&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">destPath</span> <span class="hljs-operator">=</span> localPdfPath + pdfName;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">webPath</span> <span class="hljs-operator">=</span> localPdfPath + pdfName;<br>        <span class="hljs-type">HtmlToPdf</span> <span class="hljs-variable">htmlToPdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlToPdf</span>();<br>        <span class="hljs-comment">//需要传参查询可以参考注释写法</span><br><span class="hljs-comment">//        String newCoverUrl = coverUrl + &quot;?annualId=&quot; + annualId;</span><br><span class="hljs-comment">//        String newSrcPath = srcPath + &quot;?annualId=&quot; + annualId;</span><br><span class="hljs-comment">//        htmlToPdf.convert(wkhtmltopdfPath,myoutlinePaht,newSrcPath,destPath, newCoverUrl, footerUrl);</span><br>        htmlToPdf.convert(wkhtmltopdfPath,myoutlinePaht,srcPath,destPath, coverUrl, footerUrl);<br>        <span class="hljs-keyword">return</span> webPath;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/getCover&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCover</span><span class="hljs-params">(Integer annualId, ModelMap map)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUser();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(user, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONConfig</span>().setIgnoreNullValue(<span class="hljs-literal">false</span>));<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">resMap</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonStr, Map.class);<br>        map.put(<span class="hljs-string">&quot;user&quot;</span>, resMap);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/cover&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/getFooter&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFooter</span><span class="hljs-params">(Integer annualId, ModelMap map)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/footer&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/getTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTemplate</span><span class="hljs-params">(Integer annualId, ModelMap map)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUser();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(user, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONConfig</span>().setIgnoreNullValue(<span class="hljs-literal">false</span>));<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">resMap</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonStr, Map.class);<br>        map.put(<span class="hljs-string">&quot;user&quot;</span>, resMap);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin/template&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAge(<span class="hljs-number">30</span>);<br>        user.setEmail(<span class="hljs-string">&quot;zhangsan@example.com&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;北京市朝阳区&quot;</span>);<br>        user.setExperience(<span class="hljs-number">5</span>);<br>        user.setDate(DateUtil.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><br>        <span class="hljs-comment">// 创建项目经验列表</span><br>        List&lt;Project&gt; projects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        projects.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Project</span>(<span class="hljs-string">&quot;项目A&quot;</span>, <span class="hljs-string">&quot;2018-2019&quot;</span>, <span class="hljs-string">&quot;后端开发&quot;</span>, <span class="hljs-string">&quot;负责项目A的后端开发工作&quot;</span>));<br>        projects.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Project</span>(<span class="hljs-string">&quot;项目B&quot;</span>, <span class="hljs-string">&quot;2019-2020&quot;</span>, <span class="hljs-string">&quot;系统架构师&quot;</span>, <span class="hljs-string">&quot;负责项目B的系统架构设计&quot;</span>));<br>        projects.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Project</span>(<span class="hljs-string">&quot;项目C&quot;</span>, <span class="hljs-string">&quot;2020-2021&quot;</span>, <span class="hljs-string">&quot;项目经理&quot;</span>, <span class="hljs-string">&quot;负责项目C的整体管理和协调&quot;</span>));<br><br>        user.setProjects(projects);<br><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>User类<figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">demo</span>.<span class="hljs-property">html2pdf</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> email;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> address;<br>    <span class="hljs-keyword">private</span> int experience;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> date;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Project</span>&gt; projects;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getEmail</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setEmail</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> email</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">email</span> = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAddress</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAddress</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> address</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getExperience</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> experience;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setExperience</span>(<span class="hljs-params">int experience</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">experience</span> = experience;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDate</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> date</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">date</span> = date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Project</span>&gt; <span class="hljs-title function_">getProjects</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> projects;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setProjects</span>(<span class="hljs-params"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Project</span>&gt; projects</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">projects</span> = projects;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li>Project类<figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">demo</span>.<span class="hljs-property">html2pdf</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Project</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> role;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> description;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Project</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> time, <span class="hljs-title class_">String</span> role, <span class="hljs-title class_">String</span> description) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span> = time;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">role</span> = role;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setTime</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> time</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span> = time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getRole</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> role;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setRole</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> role</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">role</span> = role;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDescription</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> description</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>前端文件放到项目中了<blockquote><p><strong>项目地址</strong>: <a href="https://github.com/digitalPartty/html2pdf">github地址</a></p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>pdf</tag>
      
      <tag>wkhtmltopdf</tag>
      
      <tag>js</tag>
      
      <tag>thymeleaf</tag>
      
      <tag>springBoot</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页调用exe</title>
    <link href="/2024/11/07/%E7%BD%91%E9%A1%B5%E8%B0%83%E7%94%A8exe/"/>
    <url>/2024/11/07/%E7%BD%91%E9%A1%B5%E8%B0%83%E7%94%A8exe/</url>
    
    <content type="html"><![CDATA[<h2 id="会有这个功能的原因"><a href="#会有这个功能的原因" class="headerlink" title="会有这个功能的原因"></a>会有这个功能的原因</h2><blockquote><p>有些医院的电子病历没有网页端,我们的产品又是一个BS架构产品.奈何公司话语权又不如医院,就有了这个网页调用exe的猜想.<br>之后在网上查阅了一些资料,加之百度网盘从网页吊起百度网盘的客户端,这个事情就提上了日程.<br>这个事情做之前还得确认两点:</p><ol><li>需要修改注册表,这个事情只能由医院信息科干,每有一个医院员工要用,就要有人把维护这个事做起来.</li><li>在所有需要用我们系统的员工的电脑上,医院的电子病历系统必须装在统一位置</li></ol></blockquote><h2 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h2><figure class="highlight nsis"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nsis">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-params">HKEY_CLASSES_ROOT</span>\EMRCallEXE]<br>@=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;URL Protocol&quot;</span>=<span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-params">HKEY_CLASSES_ROOT</span>\EMRCallEXE\DefaultIcon]<br>@=<span class="hljs-string">&quot;D:\\\\电子病历\\\\TPEMRWS.exe\&quot;</span> <span class="hljs-comment">#电子病历exe位置</span><br><br>[<span class="hljs-params">HKEY_CLASSES_ROOT</span>\EMRCallEXE\Shell]<br><br>[<span class="hljs-params">HKEY_CLASSES_ROOT</span>\EMRCallEXE\Shell\<span class="hljs-literal">Open</span>]<br><br>[<span class="hljs-params">HKEY_CLASSES_ROOT</span>\EMRCallEXE\Shell\<span class="hljs-literal">Open</span>\Command]<br>@=<span class="hljs-string">&quot;\&quot;</span>D:\\电子病历\\start.bat\<span class="hljs-string">&quot; \&quot;</span>%<span class="hljs-number">1</span>\<span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#这个是调用bat地址,并且传递了一个参数</span><br></code></pre></div></td></tr></table></figure><p>上面的代码保存成.rge文件,以管理员权限运行</p><h2 id="编写bat脚本"><a href="#编写bat脚本" class="headerlink" title="编写bat脚本"></a>编写bat脚本</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">@echo off<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%~1&quot;</span>==<span class="hljs-string">&quot;&quot;</span> (<br>    echo ERROR: No executable file specified.<br>    pause<br>    <span class="hljs-keyword">exit</span> /b <span class="hljs-number">1</span><br>)<br>set decoded_path=%~<span class="hljs-number">1</span><br>set exe_file=<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;tokens=2 delims=:&quot;</span> %%i <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;%decoded_path%&quot;</span>) <span class="hljs-keyword">do</span> set <span class="hljs-string">&quot;exe_file=%%i&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%exe_file%&quot;</span>==<span class="hljs-string">&quot;&quot;</span> (<br>    echo ERROR: Invalid filepath.<br>    pause<br>    <span class="hljs-keyword">exit</span> /b <span class="hljs-number">1</span><br>)<br>start D:\电子病历\EMRFILESHOW.exe <span class="hljs-string">&quot;%exe_file%&quot;</span><br></code></pre></div></td></tr></table></figure><p>保存成.bat文件,并放到<code>D:\\电子病历\\start.bat</code>这个地址</p><h2 id="调用链接"><a href="#调用链接" class="headerlink" title="调用链接"></a>调用链接</h2><p><code>emrcallexe:param</code><br>调用不起来可以考虑<br><code>emrcallexe://param</code></p>]]></content>
    
    
    <categories>
      
      <category>技术研究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本管理规范</title>
    <link href="/2024/11/07/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <url>/2024/11/07/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="1-版本号规范"><a href="#1-版本号规范" class="headerlink" title="1. 版本号规范"></a>1. 版本号规范</h2><h3 id="1-1-规则"><a href="#1-1-规则" class="headerlink" title="1.1 规则"></a>1.1 规则</h3><ul><li>字母、数字、小数点</li><li>共3位，小数点区隔：版本升级.特性升级.修订补丁</li><li>开发版基于稳定版发布；开发完成后，合并到一个新的稳定版版本号中<blockquote><p>例如：稳定版1.0.0，开发版前端1.0.5-dev，后端1.0.9-dev，开发完成后，合并到1.1.0-stable</p></blockquote></li></ul><h3 id="1-2-定义"><a href="#1-2-定义" class="headerlink" title="1.2 定义"></a>1.2 定义</h3><ul><li>版本升级<blockquote><p>大版本迭代，例如：增加新的业务场景、业务流程、功能模块<br>特点：功能模块固定，部署维护形成SOP（标准作业程序）</p></blockquote></li><li>特性升级<blockquote><p>已有功能模块迭代，例如：统计模块增加统计页面、新增驾驶舱进行统计数据的可视化展示等<br>特点：可以在现有版本上平滑升级，不影响现有业务流程</p></blockquote></li><li>修订补丁<blockquote><p>Bug修正，例如：页面展示错误、接口数据错误等<br>特点：当前版本的Bug缺陷</p></blockquote></li></ul><h2 id="2-后缀规范"><a href="#2-后缀规范" class="headerlink" title="2. 后缀规范"></a>2. 后缀规范</h2><h3 id="2-1-规则"><a href="#2-1-规则" class="headerlink" title="2.1 规则"></a>2.1 规则</h3><ul><li>版本号后面横线加字母</li><li>后缀：稳定版：stable，开发版：dev，定制版：custom-医院CODE</li></ul><h3 id="2-2-定义"><a href="#2-2-定义" class="headerlink" title="2.2 定义"></a>2.2 定义</h3><ul><li>稳定版-stable<blockquote><p>测试通过的，可以大范围更新</p></blockquote></li><li>开发版-dev<blockquote><p>新的特性在某家医院实验中，例如章丘</p></blockquote></li><li>定制版-custom-医院CODE<blockquote><p>医院特殊需求</p></blockquote></li></ul><h2 id="3-版本迭代流程"><a href="#3-版本迭代流程" class="headerlink" title="3. 版本迭代流程"></a>3. 版本迭代流程</h2><p><img src="/2024/11/07/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/manager1.jpg" alt="m"></p><h2 id="研发流程"><a href="#研发流程" class="headerlink" title="研发流程"></a>研发流程</h2><p><img src="/2024/11/07/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/manager2.png" alt="mm"></p>]]></content>
    
    
    <categories>
      
      <category>管理规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>版本管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git代码管理规范</title>
    <link href="/2024/11/06/Git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <url>/2024/11/06/Git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h2><h3 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h3><blockquote><p>master 为主分支，也是用于部署生产环境的分支，需要确保master分支稳定性。master 分支一般由 release 以及 hotfix 分支合并，任何时间都不能直接修改代码。</p></blockquote><h3 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h3><blockquote><p>develop 为开发环境分支，始终保持最新完成以及bug修复后的代码，用于前后端联调。一般开发的新功能时，feature分支都是基于develop分支创建的。</p></blockquote><h3 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h3><blockquote><p>开发新功能时，以develop为基础创建feature分支。<br>分支命名时以 feature&#x2F; 开头，后面可以加上开发的功能模块， 命名示例：feature&#x2F;user_module、feature&#x2F;cart_module</p></blockquote><h3 id="test分支"><a href="#test分支" class="headerlink" title="test分支"></a>test分支</h3><blockquote><p>test为测试环境分支，外部用户无法访问，专门给测试人员使用，版本相对稳定。</p></blockquote><h3 id="release分支-暂不需要"><a href="#release分支-暂不需要" class="headerlink" title="release分支(暂不需要)"></a>release分支(暂不需要)</h3><blockquote><p>release 为预上线分支（预发布分支），UAT测试阶段使用。一般由 test 或 hotfix 分支合并，不建议直接在 release 分支上直接修改代码。</p></blockquote><h3 id="hotfix-分支"><a href="#hotfix-分支" class="headerlink" title="hotfix 分支"></a>hotfix 分支</h3><blockquote><p>线上出现紧急问题时，需要及时修复，以master分支为基线，创建hotfix分支。修复完成后，需要合并到 master 分支和 develop 分支。<br>分支命名以hotfix&#x2F; 开头的为修复分支，它的命名规则与 feature 分支类似。<br>我们现在做的git管理规范都是</p></blockquote><ul><li>稳定版-stable </li><li>开发版-dev (相当于develop,feature,test,release四个分支) 我考虑把dev拆成两个分支(develop,feature)test,develop和release和现在的dev功能相似,往下分一个feature分支用来做新功能</li><li>定制版-custom-医院CODE(这个现在基本上没用到)</li></ul><h3 id="分支与环境对应关系"><a href="#分支与环境对应关系" class="headerlink" title="分支与环境对应关系"></a>分支与环境对应关系</h3><p>在系统开发过程中常用的环境：</p><blockquote><p>DEV 环境（Development environment）：用于开发者调试使用(本地测试)<br>UAT环境 （User Acceptance Test environment）：用户验收测试环境，用于生产环境下的软件测试者测试使用(相当于发布到线上)<br>PRO 环境（Production environment）：生产环境(相当于医院使用)</p></blockquote><h3 id="对应关系："><a href="#对应关系：" class="headerlink" title="对应关系："></a>对应关系：</h3><blockquote><p>分支功能环境可访问master主分支，稳定版本PRO是develop开发分支，最新版本DEV是&gt;feature开发分支，实现新特性<br>test测试分支，功能测试FAT是release预上线分支，发布新版本UAT是hotfix紧急修复分支，修复线上bug</p></blockquote><h3 id="分支合并流程规范"><a href="#分支合并流程规范" class="headerlink" title="分支合并流程规范"></a>分支合并流程规范</h3><blockquote><p>业界常见的两大主分支（master、develop）、三个辅助分支（feature、release、hotfix）的生命周期：<br><img src="/2024/11/06/Git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/git1.jpg" alt="图片"><br>例如我们团队在开发时，至少需要保证以下流程：<br>develop 分支和 hotfix 分支，必须从 master 分支检出<br>由 develop 分支合并到 master分支<br>功能测试无误后，由 develop 分支提交到线上测试<br>对于工作量小的功能开发（工时小于1天），可以直接在devolop 分支进行开发，否则由 develop 分支检出 feature 分支进行开发，开发完后合并到develop 分支<br><img src="/2024/11/06/Git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/git2.png" alt="图片"><br>以上生命周期仅作参考，不同开发团队可能有不同的规范，可自行灵活定义。<br>例如我们团队在开发时，至少需要保证以下流程：<br>develop 分支和 hotfix 分支，必须从 master 分支检出<br>由 develop 分支合并到 test 分支<br>功能测试无误后，由 test 分支合并到 release 分支<br>UAT测试通过后，由 release 分支合并到 master分支<br>对于工作量小的功能开发（工时小于1天），可以直接在devolop 分支进行开发，否则由 develop 分支检出 feature 分支进行开发，开发完后合并到develop 分支</p></blockquote><h2 id="Git-Commit-Message规范"><a href="#Git-Commit-Message规范" class="headerlink" title="Git Commit Message规范"></a>Git Commit Message规范</h2><blockquote><p>Git commit message规范指提交代码时编写的规范注释，编写良好的Commit messages可以达到3个重要的目的：<br>加快代码review的流程<br>帮助我们编写良好的版本发布日志<br>让之后的维护者了解代码里出现特定变化和feature被添加的原因</p></blockquote><h2 id="type规范"><a href="#type规范" class="headerlink" title="type规范"></a>type规范</h2><blockquote><p>Angular Git Commit Guidelines中推荐的type类型如下：<br>feat: 新增功能<br>fix: 修复bug<br>docs: 仅文档更改<br>style: 不影响代码含义的更改（空白、格式设置、缺失 分号等）<br>refactor: 既不修复bug也不添加特性的代码更改<br>perf: 改进性能的代码更改<br>test: 添加缺少的测试或更正现有测试<br>chore: 对构建过程或辅助工具和库（如文档）的更改<br>除此之外，还有一些常用的类型：<br>delete：删除功能或文件<br>modify：修改功能<br>build：改变构建流程，新增依赖库、工具等（例如webpack、gulp、npm修改）<br>test：测试用例的新增、修改<br>ci：自动化流程配置修改<br>revert：回滚到上一个版本</p></blockquote><h2 id="单次提交注意事项"><a href="#单次提交注意事项" class="headerlink" title="单次提交注意事项"></a>单次提交注意事项</h2><blockquote><p>提交问题必须为同一类别<br>提交问题不要超过3个<br>提交的commit发现不符合规范，git commit –amend -m “新的提交信息”或 git reset –hard HEAD 重新提交一次</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>此外，还有一些其他建议：<br>master 分支的每一次更新，都建议打 tag 添加标签，通常为对应版本号，便于管理<br>feature分支、hotfix分支在合并后可以删除，避免分支过多管理混乱<br>每次 pull 代码前，提交本地代码到本地库中，否则可能回出现合并代码出错，导致代码丢失</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>管理规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>管理规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁移Gitlab</title>
    <link href="/2024/11/06/%E8%BF%81%E7%A7%BBGitlab/"/>
    <url>/2024/11/06/%E8%BF%81%E7%A7%BBGitlab/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h2><p>源服务器gitlab为39.0.0.0:8083<br>目标服务器gitlab为47.0.0.0:8083<br>要整个GitLab库迁移，可以按照以下步骤进行操作：</p><h3 id="1-在源GitLab服务器上创建一个备份文件："><a href="#1-在源GitLab服务器上创建一个备份文件：" class="headerlink" title="1. 在源GitLab服务器上创建一个备份文件："></a>1. 在源GitLab服务器上创建一个备份文件：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-rake gitlab:backup:create<br></code></pre></div></td></tr></table></figure><p>生成的备份文件为举例：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;1702002765_2023_12_08_11.4.8_gitlab_backup.tar</p><h3 id="2-将备份文件下载到目标GitLab服务器："><a href="#2-将备份文件下载到目标GitLab服务器：" class="headerlink" title="2. 将备份文件下载到目标GitLab服务器："></a>2. 将备份文件下载到目标GitLab服务器：</h3><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">scp root<span class="hljs-variable">@source_server</span><span class="hljs-symbol">:/var/opt/gitlab/backups/&lt;backup_file&gt;</span> /var/opt/gitlab/backups/<br></code></pre></div></td></tr></table></figure><p>或者   （目标服务器的22端口换为18888的服务器时）举例如下：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">scp -P <span class="hljs-number">18888</span> /var/opt/gitlab/backups/<span class="hljs-number">1702002765_2023_12_08_11.4</span>.<span class="hljs-number">8_</span>gitlab_backup.tar root<span class="hljs-variable">@47</span>.<span class="hljs-number">0.0</span>.<span class="hljs-number">0</span><span class="hljs-symbol">:/var/opt/gitlab/backups/</span><br></code></pre></div></td></tr></table></figure><h3 id="3-在目标GitLab服务器上还原备份文件："><a href="#3-在目标GitLab服务器上还原备份文件：" class="headerlink" title="3. 在目标GitLab服务器上还原备份文件："></a>3. 在目标GitLab服务器上还原备份文件：</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> gitlab-rake gitlab:backup:restore BACKUP=<span class="hljs-number">1702002765</span>_2023_12_08_11.<span class="hljs-number">4</span>.<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h3 id="4-重启GitLab："><a href="#4-重启GitLab：" class="headerlink" title="4. 重启GitLab："></a>4. 重启GitLab：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl restart<br></code></pre></div></td></tr></table></figure><p>然后就完成了整个GitLab库的迁移。需要注意的是，在迁移之前应该确保目标GitLab服务器的版本和源GitLab服务器的版本相同或更高。另外，还需要确保在迁移期间没有对源GitLab服务器进行更改。</p><h2 id="问题情况处理"><a href="#问题情况处理" class="headerlink" title="问题情况处理"></a>问题情况处理</h2><h3 id="1-安装过程中问题"><a href="#1-安装过程中问题" class="headerlink" title="1. 安装过程中问题"></a>1. 安装过程中问题</h3><blockquote><p>安装github过程中即便报错了，尽量也不要退出否则容易造成后期没法再安装的问题，就只能卸载重装</p></blockquote><h3 id="2-本次安装一直报postg"><a href="#2-本次安装一直报postg" class="headerlink" title="2. 本次安装一直报postg"></a>2. 本次安装一直报postg</h3><h4 id="1-登录postgresql"><a href="#1-登录postgresql" class="headerlink" title="1. 登录postgresql"></a>1. 登录postgresql</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">psql</span> -h <span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">5432</span> -U  gitlabhq_production<br></code></pre></div></td></tr></table></figure><h4 id="2-输入你的密码"><a href="#2-输入你的密码" class="headerlink" title="2. 输入你的密码"></a>2. 输入你的密码</h4><h4 id="3-建表-并退出"><a href="#3-建表-并退出" class="headerlink" title="3. 建表 并退出"></a>3. 建表 并退出</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> gitlabhq_production;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> &quot;pg_trgm&quot;;<br>\q<br></code></pre></div></td></tr></table></figure><h4 id="4-再配置一次"><a href="#4-再配置一次" class="headerlink" title="4. 再配置一次"></a>4. 再配置一次</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl reconfigure<br></code></pre></div></td></tr></table></figure><h2 id="卸载gitlub"><a href="#卸载gitlub" class="headerlink" title="卸载gitlub"></a>卸载gitlub</h2><h3 id="1-停止-GitLab-服务"><a href="#1-停止-GitLab-服务" class="headerlink" title="1. 停止 GitLab 服务:"></a>1. 停止 GitLab 服务:</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/opt/gi</span>tlab<span class="hljs-regexp">/bin/gi</span>tlab-ctl stop<br></code></pre></div></td></tr></table></figure><h3 id="2-卸载-GitLab"><a href="#2-卸载-GitLab" class="headerlink" title="2. 卸载 GitLab:"></a>2. 卸载 GitLab:</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm -e gitlab-ce<br></code></pre></div></td></tr></table></figure><h3 id="3-删除-GitLab-相关数据"><a href="#3-删除-GitLab-相关数据" class="headerlink" title="3. 删除 GitLab 相关数据:"></a>3. 删除 GitLab 相关数据:</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/opt/gitlab<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /opt/gitlab<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /etc/gitlab<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/log/gitlab<br></code></pre></div></td></tr></table></figure><h3 id="4-删除-GitLab-用户和组"><a href="#4-删除-GitLab-用户和组" class="headerlink" title="4. 删除 GitLab 用户和组:"></a>4. 删除 GitLab 用户和组:</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> userdel git<br><span class="hljs-built_in">sudo</span> groupdel git<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装Gitlab</title>
    <link href="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/"/>
    <url>/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/</url>
    
    <content type="html"><![CDATA[<h2 id="安装并配置必要的依赖关系"><a href="#安装并配置必要的依赖关系" class="headerlink" title="安装并配置必要的依赖关系"></a>安装并配置必要的依赖关系</h2><p>在CentOS系统上安装所需的依赖：ssh，防火墙,postfix(用于邮件通知) ，wget，以下这些命令也会打开系统防火墙中的HTTP和SSH端口访问。</p><h3 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h3><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">sudo yum install -y curl policycoreutils-pythonopenssh-<span class="hljs-keyword">server</span><br></code></pre></div></td></tr></table></figure><h3 id="将SSH服务设置成开机自启动，安装命令："><a href="#将SSH服务设置成开机自启动，安装命令：" class="headerlink" title="将SSH服务设置成开机自启动，安装命令："></a>将SSH服务设置成开机自启动，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> sshd  <br></code></pre></div></td></tr></table></figure><h3 id="启动SSH服务，安装命令："><a href="#启动SSH服务，安装命令：" class="headerlink" title="启动SSH服务，安装命令："></a>启动SSH服务，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start sshd<br></code></pre></div></td></tr></table></figure><h3 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h3><p>如果已经安装了防火墙并且已经在运行状态，则可直接跳过</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> firewalld systemd -y<br></code></pre></div></td></tr></table></figure><h3 id="若出现“完毕！”的字样，则表示安装成功"><a href="#若出现“完毕！”的字样，则表示安装成功" class="headerlink" title="若出现“完毕！”的字样，则表示安装成功"></a>若出现“完毕！”的字样，则表示安装成功</h3><h3 id="开启防火墙，安装命令："><a href="#开启防火墙，安装命令：" class="headerlink" title="开启防火墙，安装命令："></a>开启防火墙，安装命令：</h3><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">service firewalld  <span class="hljs-literal">start</span><br></code></pre></div></td></tr></table></figure><h3 id="添加http服务到firewalld-pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效。"><a href="#添加http服务到firewalld-pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效。" class="headerlink" title="添加http服务到firewalld,pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效。"></a>添加http服务到firewalld,pemmanent表示永久生效，若不加–permanent系统下次启动后就会失效。</h3><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">service=http</span><br></code></pre></div></td></tr></table></figure><h3 id="重启防火墙，安装命令："><a href="#重启防火墙，安装命令：" class="headerlink" title="重启防火墙，安装命令："></a>重启防火墙，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload firewalld<br></code></pre></div></td></tr></table></figure><h3 id="接下来，安装Postfix以发送通知邮件，安装命令："><a href="#接下来，安装Postfix以发送通知邮件，安装命令：" class="headerlink" title="接下来，安装Postfix以发送通知邮件，安装命令："></a>接下来，安装Postfix以发送通知邮件，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install postfix<br></code></pre></div></td></tr></table></figure><h3 id="将postfix服务设置成开机自启动，安装命令："><a href="#将postfix服务设置成开机自启动，安装命令：" class="headerlink" title="将postfix服务设置成开机自启动，安装命令："></a>将postfix服务设置成开机自启动，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> postfix<br></code></pre></div></td></tr></table></figure><h3 id="启动postfix，安装命令："><a href="#启动postfix，安装命令：" class="headerlink" title="启动postfix，安装命令："></a>启动postfix，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start postfix<br></code></pre></div></td></tr></table></figure><p>在安装Postfix期间，可能会出现配置屏幕。选择“Internet Site”并按enter键。使用您的服务器的外部DNS以“mail name”并按enter。如果出现额外的屏幕，继续按enter键接受默认值。</p><h3 id="wget-用于从外网上下载插件"><a href="#wget-用于从外网上下载插件" class="headerlink" title="wget 用于从外网上下载插件"></a>wget 用于从外网上下载插件</h3><p>检查系统中是否已经安装wget，使用命令若出现下图wget相关版本描述则说明系统中已经安装wget 若报系统找不到命令说明wget未安装</p><h3 id="若wget未安装则进行安装，安装命令："><a href="#若wget未安装则进行安装，安装命令：" class="headerlink" title="若wget未安装则进行安装，安装命令："></a>若wget未安装则进行安装，安装命令：</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> wget<br></code></pre></div></td></tr></table></figure><h3 id="安装vim编辑器-安装命令："><a href="#安装vim编辑器-安装命令：" class="headerlink" title="安装vim编辑器  安装命令："></a>安装vim编辑器  安装命令：</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> vim -y<br></code></pre></div></td></tr></table></figure><h2 id="添加GitLab镜像源并安装gitlab服务器"><a href="#添加GitLab镜像源并安装gitlab服务器" class="headerlink" title="添加GitLab镜像源并安装gitlab服务器"></a>添加GitLab镜像源并安装gitlab服务器</h2><h3 id="添加gitlab镜像"><a href="#添加gitlab镜像" class="headerlink" title="添加gitlab镜像"></a>添加gitlab镜像</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-ce.<span class="hljs-number">0</span>.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure><h3 id="安装gitlab-安装命令："><a href="#安装gitlab-安装命令：" class="headerlink" title="安装gitlab 安装命令："></a>安装gitlab 安装命令：</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -i gitlab-ce-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-ce.<span class="hljs-number">0</span>.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure><h3 id="修改gitlab配置文件指定服务器ip和自定义端口："><a href="#修改gitlab配置文件指定服务器ip和自定义端口：" class="headerlink" title="修改gitlab配置文件指定服务器ip和自定义端口："></a>修改gitlab配置文件指定服务器ip和自定义端口：</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">vim  <span class="hljs-regexp">/etc/gi</span>tlab/gitlab.rb<br></code></pre></div></td></tr></table></figure><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab1.png" alt="gitlab1"><br>进入编辑器后按“i”键进入编辑状态，ESC键退出编辑状态<br>退出并保存，命令输入:wq<br>ps:注意这里设置的端口不能被占用，默认是8080端口，如果8080已经使用，请自定义其它端口，并在防火墙设置开放相对应得端口</p><h3 id="重置并启动GitLab"><a href="#重置并启动GitLab" class="headerlink" title="重置并启动GitLab"></a>重置并启动GitLab</h3><p>执行：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">gitlab-ctl reconfigure</span><br><span class="hljs-attribute">gitlab-ctl restart</span><br></code></pre></div></td></tr></table></figure><p>提示  “ok: run:”表示启动成功</p><h3 id="访问-GitLab页面"><a href="#访问-GitLab页面" class="headerlink" title="访问 GitLab页面"></a>访问 GitLab页面</h3><p>如果没有域名，直接输入服务器ip和指定端口进行访问<br>初始账户: root 密码:5iveL!fe<br>第一次登录修改密码（后边会讲）</p><h2 id="安装过程遇见的那些坑"><a href="#安装过程遇见的那些坑" class="headerlink" title="安装过程遇见的那些坑"></a>安装过程遇见的那些坑</h2><h3 id="在CentOS里面安装软件-提示软件已安装，但是rpm-q和-e都是提示包没有安装"><a href="#在CentOS里面安装软件-提示软件已安装，但是rpm-q和-e都是提示包没有安装" class="headerlink" title="在CentOS里面安装软件,提示软件已安装，但是rpm -q和-e都是提示包没有安装"></a>在CentOS里面安装软件,提示软件已安装，但是rpm -q和-e都是提示包没有安装</h3><p>查看与rpm包相关的文件和其他信息   rpm -qa | grep 包名<br>查询包是否被安装，命令：rpm -q 包名<br>删除软件包，命令：rpm -e 包名<br>运行以上三步，把原来的包删除掉重新下载和安装</p><h3 id="开放gitlab端口"><a href="#开放gitlab端口" class="headerlink" title="开放gitlab端口"></a>开放gitlab端口</h3><blockquote><p>CentOS 7 开放防火墙端口 命令<br>最近CentOS7的防火墙和6不一样了， 发现以前CentOS 6 系列中的 iptables 相关命令不能用了，查了下，发现Centos 7使用firewalld代替了原来的iptables。<br>使用方法如下：<br>关闭防火墙</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">systemctl <span class="hljs-keyword">stop</span> firewalld.service             <span class="hljs-meta">#停止firewall</span><br>systemctl <span class="hljs-keyword">disable</span> firewalld.service        <span class="hljs-meta">#禁止firewall开机启动</span><br></code></pre></div></td></tr></table></figure><blockquote><p>开启端口</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/tcp --permanent<br></code></pre></div></td></tr></table></figure><blockquote><p>命令含义：<br>–zone #作用域<br>–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议<br>–permanent #永久生效，没有此参数重启后失效<br>重启防火墙</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></div></td></tr></table></figure><blockquote><p>常用命令介绍</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--state</span>                           <span class="hljs-comment">##查看防火墙状态，是否是running</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--reload</span>                          <span class="hljs-comment">##重新载入配置，比如添加规则之后，需要执行此命令</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--get-zones</span>                       <span class="hljs-comment">##列出支持的zone</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--get-services</span>                    <span class="hljs-comment">##列出支持的服务，在列表中的服务是放行的</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--query-service</span> <span class="hljs-string">ftp</span>               <span class="hljs-comment">##查看ftp服务是否支持，返回yes或者no</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--add-service=ftp</span>                 <span class="hljs-comment">##临时开放ftp服务</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--add-service=ftp</span> <span class="hljs-built_in">--permanent</span>     <span class="hljs-comment">##永久开放ftp服务</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--remove-service=ftp</span> <span class="hljs-built_in">--permanent</span>  <span class="hljs-comment">##永久移除ftp服务</span><br><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--add-port=80/tcp</span> <span class="hljs-built_in">--permanent</span>     <span class="hljs-comment">##永久添加80端口 </span><br><span class="hljs-string">iptables</span> -<span class="hljs-string">L</span> -<span class="hljs-string">n</span>                                 <span class="hljs-comment">##查看规则，这个命令是和iptables的相同的</span><br><span class="hljs-string">man</span> <span class="hljs-string">firewall-cmd</span>                               <span class="hljs-comment">##查看帮助</span><br></code></pre></div></td></tr></table></figure><p>更多命令，使用 <code>firewall-cmd --help</code> 查看帮助文件</p><p>重新开启防火墙：Failed to start firewalld.service: Unit firewalld.service is masked 问题解决：</p><ol><li>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下<ol><li>直接关闭防火墙<figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">systemctl <span class="hljs-keyword">stop</span> firewalld.service           <span class="hljs-meta">#停止firewall</span><br>systemctl <span class="hljs-keyword">disable</span> firewalld.service     <span class="hljs-meta">#禁止firewall开机启动</span><br></code></pre></div></td></tr></table></figure></li><li>设置 iptables service<figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> iptables-services<br></code></pre></div></td></tr></table></figure></li><li>如果要修改防火墙配置，如增加防火墙端口3306<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysconfig/iptables <br></code></pre></div></td></tr></table></figure></li><li>增加规则<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">-<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -m state <span class="hljs-attr">--state</span> NEW -m tcp -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">3306</span> -j ACCEPT<br></code></pre></div></td></tr></table></figure></li><li>保存退出后<figure class="highlight nsis"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl restart iptables.service <span class="hljs-comment">#重启防火墙使配置生效</span><br><span class="hljs-params">system</span>ctl enable iptables.service <span class="hljs-comment">#设置防火墙开机启动</span><br></code></pre></div></td></tr></table></figure>最后重启系统使设置生效即可。</li></ol></li></ol><h2 id="初始化管理员密码"><a href="#初始化管理员密码" class="headerlink" title="初始化管理员密码;"></a>初始化管理员密码;</h2><h3 id="改超级管理员root的密码"><a href="#改超级管理员root的密码" class="headerlink" title="改超级管理员root的密码"></a>改超级管理员root的密码</h3><ol><li>切换目录：<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/gitlab/bin<br></code></pre></div></td></tr></table></figure></li><li>执行 ：<figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">sudo gitlab-rails <span class="hljs-built_in">console</span> production 命令 开始初始化密码<br></code></pre></div></td></tr></table></figure></li><li>在irb(main):001:0&gt; 后面通过 <code> u=User.where(id:1).first</code> 来查找与切换账号（User.all 可以查看所有用户）</li><li>通过<code>u.password=&#39;12345678&#39;</code>设置密码为12345678(这里的密码看自己喜欢)：</li><li>通过<code>u.password_confirmation=&#39;12345678&#39;</code> 再次确认密码</li><li>通过 <code>u.save!</code>进行保存（切记切记 后面的 !）</li><li>如果看到true ，恭喜你已经成功了，执行 exit 退出当前设置流程即可。</li><li>回到gitlab ,可以通过 root&#x2F;12345678 这一超级管理员账号登录了<br>至此大功搞成。<br>剩下来的就是享受成功带来的gitlab乐趣了。</li></ol><h2 id="创建仓库；"><a href="#创建仓库；" class="headerlink" title="创建仓库；"></a>创建仓库；</h2><h3 id="查看是否开启ssh和http"><a href="#查看是否开启ssh和http" class="headerlink" title="查看是否开启ssh和http"></a>查看是否开启ssh和http</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab2.png" alt="图片"></p><h3 id="关闭头像服务，因其在国外，减缓了访问速度"><a href="#关闭头像服务，因其在国外，减缓了访问速度" class="headerlink" title="关闭头像服务，因其在国外，减缓了访问速度"></a>关闭头像服务，因其在国外，减缓了访问速度</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab3.png" alt="图片"></p><h3 id="关闭注册接口，因为这是企业内部的访问仓库，账号由管理员分发"><a href="#关闭注册接口，因为这是企业内部的访问仓库，账号由管理员分发" class="headerlink" title="关闭注册接口，因为这是企业内部的访问仓库，账号由管理员分发"></a>关闭注册接口，因为这是企业内部的访问仓库，账号由管理员分发</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab4.png" alt="图片"></p><h3 id="登录页面的信息提示"><a href="#登录页面的信息提示" class="headerlink" title="登录页面的信息提示"></a>登录页面的信息提示</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab5.png" alt="图片"></p><h3 id="记得保存！"><a href="#记得保存！" class="headerlink" title="记得保存！"></a>记得保存！</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab6.png" alt="图片"></p><h3 id="新建用户（管理员操作）"><a href="#新建用户（管理员操作）" class="headerlink" title="新建用户（管理员操作）"></a>新建用户（管理员操作）</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab7.png" alt="图片"><br><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab8.png" alt="图片"><br><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab9.png" alt="图片"></p><h3 id="创建仓库-项目"><a href="#创建仓库-项目" class="headerlink" title="创建仓库-项目"></a>创建仓库-项目</h3><p><img src="/2024/11/05/%E5%AE%89%E8%A3%85Gitlab/gitlab10.png" alt="图片"></p><h3 id="创建完空白仓库就可以通过idea或者命令行等方式上传代码；"><a href="#创建完空白仓库就可以通过idea或者命令行等方式上传代码；" class="headerlink" title="创建完空白仓库就可以通过idea或者命令行等方式上传代码；"></a>创建完空白仓库就可以通过idea或者命令行等方式上传代码；</h3>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装RabbitMQ3.8.5</title>
    <link href="/2024/11/05/Centos7%E5%AE%89%E8%A3%85RabbitMQ3-8-5/"/>
    <url>/2024/11/05/Centos7%E5%AE%89%E8%A3%85RabbitMQ3-8-5/</url>
    
    <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ol><li>Centos7-64位</li><li>Erlang-OTP 23</li><li>RabbitMQ-3.8.5</li></ol><h2 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h2><h3 id="erlang和rabbitmq的版本对应关系"><a href="#erlang和rabbitmq的版本对应关系" class="headerlink" title="erlang和rabbitmq的版本对应关系"></a>erlang和rabbitmq的版本对应关系</h3><p><a href="https://www.rabbitmq.com/which-erlang.html">版本对应网址</a></p><h3 id="通过rpm安装erlang"><a href="#通过rpm安装erlang" class="headerlink" title="通过rpm安装erlang"></a>通过rpm安装erlang</h3><ol><li>完成erlang的前置条件配置<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>packagecloud.io<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/rabbitmq/</span>erlang/script.rpm.sh | sudo bash<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h3><p><code>yum install -y erlang</code></p><h3 id="检查erlang的版本号"><a href="#检查erlang的版本号" class="headerlink" title="检查erlang的版本号"></a>检查erlang的版本号</h3><p><code> erl</code><br>erlang安装完成</p><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><h3 id="先导入两个key"><a href="#先导入两个key" class="headerlink" title="先导入两个key"></a>先导入两个key</h3><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">    rpm --<span class="hljs-keyword">import</span> https:<span class="hljs-comment">//packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br>    rpm --<span class="hljs-keyword">import</span> https:<span class="hljs-comment">//packagecloud.io/gpg.key</span><br>    rpm --<span class="hljs-keyword">import</span> https:<span class="hljs-comment">//www.rabbitmq.com/rabbitmq-release-signing-key.asc</span><br></code></pre></div></td></tr></table></figure><h3 id="完成RabbitMQ的前置条件配置"><a href="#完成RabbitMQ的前置条件配置" class="headerlink" title="完成RabbitMQ的前置条件配置"></a>完成RabbitMQ的前置条件配置</h3><p>curl -s <a href="https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh">https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh</a> | sudo bash</p><h3 id="下载RabbitMQ安装包"><a href="#下载RabbitMQ安装包" class="headerlink" title="下载RabbitMQ安装包"></a>下载RabbitMQ安装包</h3><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.5/rabbitmq-server-3.8.5-1.el7.noarch.rpm">RabbitMQ安装包</a></p><h3 id="上传到服务器，然后使用命名安装"><a href="#上传到服务器，然后使用命名安装" class="headerlink" title="上传到服务器，然后使用命名安装"></a>上传到服务器，然后使用命名安装</h3><p>命令执行的时候和rabbitmq-server-3.8.5-1.el7.noarch.rpm需要在同一文件夹或者指定文件地址<br><code> rpm -ivh rabbitmq-server-3.8.5-1.el7.noarch.rpm</code></p><h3 id="安装socat"><a href="#安装socat" class="headerlink" title="安装socat"></a>安装socat</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> epel-release<br>yum -y <span class="hljs-keyword">install</span> socat<br></code></pre></div></td></tr></table></figure><h3 id="再次安装RabbitMQ"><a href="#再次安装RabbitMQ" class="headerlink" title="再次安装RabbitMQ"></a>再次安装RabbitMQ</h3><p><code> rpm -ivh rabbitmq-server-3.8.5-1.el7.noarch.rpm</code></p><h3 id="启用管理平台插件，启用插件后，可以可视化管理RabbitMQ。"><a href="#启用管理平台插件，启用插件后，可以可视化管理RabbitMQ。" class="headerlink" title="启用管理平台插件，启用插件后，可以可视化管理RabbitMQ。"></a>启用管理平台插件，启用插件后，可以可视化管理RabbitMQ。</h3><p><code> rabbitmq-plugins enable rabbitmq_management</code></p><h3 id="启动rabbitmq"><a href="#启动rabbitmq" class="headerlink" title="启动rabbitmq"></a>启动rabbitmq</h3><p><code> systemctl start rabbitmq-server</code></p><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ol><li>创建用户名admin，密码aaaaaa的用户：</li></ol><p><code> rabbitmqctl add_user admin aaaaaa</code><br>  2. 设置admin为超级管理员<br><code> rabbitmqctl set_user_tags admin administrator</code><br>  3. 授权远程访问（也可以登录后，可视化配置）<br><code> rabbitmqctl set_permissions -p / admin &quot;.&quot; &quot;.&quot; &quot;.*&quot;</code><br>  4. 创建完成后，重启RabbitMQ<br><code> systemctl restart rabbitmq-server</code></p><ol><li>登录用户admin</li><li>访问地址<a href="http://ip:15672,如果访问不了，确认是否开启端口5672和15672">http://ip:15672,如果访问不了，确认是否开启端口5672和15672</a></li><li>RabbitMQ配置完成<br>到目前为止，RabbitMQ安装配置完成，可是使用IP（192.168.10.88）、用户（admin）、密码（aaaaaa）进行连接使用了</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown文档的基础使用和hexo常用的功能</title>
    <link href="/2024/11/04/Markdow%E6%96%87%E6%A1%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%92%8Chexo%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/11/04/Markdow%E6%96%87%E6%A1%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%92%8Chexo%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="Markdown文档的基础使用"><a href="#Markdown文档的基础使用" class="headerlink" title="Markdown文档的基础使用"></a>Markdown文档的基础使用</h2><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题(例如：### My Header)。</p><table><thead><tr><th>写法</th><th>样式</th></tr></thead><tbody><tr><td># 一级标题</td><td><h1>一级标题</h1></td></tr><tr><td>## 二级标题</td><td><h2>一级标题</h2></td></tr><tr><td>### 三级标题</td><td><h3>一级标题</h3></td></tr><tr><td>#### 四级标题</td><td><h4>一级标题</h4></td></tr><tr><td>##### 五级标题</td><td><h5>一级标题</h5></td></tr><tr><td>###### 六级标题</td><td><h6>一级标题</h6></td></tr></tbody></table><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><h4 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h4><p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。</p><table><thead><tr><th>写法</th><th>样式</th></tr></thead><tbody><tr><td><code>**bold text**</code></td><td><strong>bold text</strong></td></tr></tbody></table><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><table><thead><tr><th>写法</th><th>样式</th></tr></thead><tbody><tr><td><code>*bold text*</code></td><td>*bold text *</td></tr></tbody></table><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p><table><thead><tr><th>写法</th><th>样式</th></tr></thead><tbody><tr><td><code>***bold text***</code></td><td><em><strong>bold text</strong></em></td></tr></tbody></table><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><p>要创建块引用，请在段落前添加一个 &gt; 符号。</p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Dorothy</span> followed her through many <span class="hljs-keyword">of</span> the beautiful rooms <span class="hljs-keyword">in</span> her castle. </span><br></code></pre></div></td></tr></table></figure><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><h4 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h4><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。</p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Dorothy</span> followed her through many <span class="hljs-keyword">of</span> the beautiful rooms <span class="hljs-keyword">in</span> her castle.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">The</span> <span class="hljs-title class_">Witch</span> bade her clean the pots and kettles and sweep the floor and keep the fire fed <span class="hljs-keyword">with</span> wood. </span><br></code></pre></div></td></tr></table></figure><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. </p></blockquote><h4 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h4><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">&gt; Dorothy followed her through many of the <span class="hljs-keyword">beautiful </span>rooms in her castle.<br>&gt;<br>&gt;&gt; The Witch <span class="hljs-keyword">bade </span>her clean the pots <span class="hljs-keyword">and </span>kettles <span class="hljs-keyword">and </span><span class="hljs-keyword">sweep </span>the floor <span class="hljs-keyword">and </span>keep the fire fed with wood.<br></code></pre></div></td></tr></table></figure><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><h4 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h4><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">#### <span class="hljs-title class_">The</span> quarterly results look great!</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- <span class="hljs-title class_">Revenue</span> was off the chart.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- <span class="hljs-title class_">Profits</span> were higher than ever.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> *<span class="hljs-title class_">Everything</span>* is going according to **plan**.</span><br></code></pre></div></td></tr></table></figure><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p> <em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote><p><a href="https://markdown.com.cn/basic-syntax/">markdown文档链接</a></p><h2 id="hexo的常用功能"><a href="#hexo的常用功能" class="headerlink" title="hexo的常用功能"></a>hexo的常用功能</h2><h3 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h3><h4 id="打开开关"><a href="#打开开关" class="headerlink" title="打开开关"></a>打开开关</h4><p>修改_config.yml,设置</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">post_asset_folder</span>=<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="新建一个文章"><a href="#新建一个文章" class="headerlink" title="新建一个文章"></a>新建一个文章</h4><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> 如何在hexo使用图片<br></code></pre></div></td></tr></table></figure><p>这时候会自动在md文件目录生成一个同名的文件夹，把你要贴的图片附件，全都放在这里即可。</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">MacBook-Pro:_posts abone$ ll -lat 如何在hexo使用图片<br>total 1696<br>drwxr-xr-x  <span class="hljs-number"> 6 </span>abone  staff    <span class="hljs-number"> 204 </span><span class="hljs-number"> 5 </span>25 19:31 .<br>drwxr-xr-x <span class="hljs-number"> 11 </span>abone  staff    <span class="hljs-number"> 374 </span><span class="hljs-number"> 5 </span>25 19:31 ..<br>-rw-r--r--@ <span class="hljs-number"> 1 </span>abone  staff   <span class="hljs-number"> 6148 </span><span class="hljs-number"> 5 </span>25 19:27 .DS_Store<br>-rw-r--r--@ <span class="hljs-number"> 1 </span>abone  staff  <span class="hljs-number"> 22988 </span><span class="hljs-number"> 5 </span>25 19:26 图片2.jpg<br>-rw-r--r--@ <span class="hljs-number"> 1 </span>abone  staff  <span class="hljs-number"> 14468 </span><span class="hljs-number"> 5 </span>25 19:25 图片1.jpeg<br>-rw-r-----@ <span class="hljs-number"> 1 </span>abone  staff <span class="hljs-number"> 817742 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 5 </span>18:35 HAPROXYCODE.pdf<br></code></pre></div></td></tr></table></figure><h4 id="文章里插入图片和附件链接"><a href="#文章里插入图片和附件链接" class="headerlink" title="文章里插入图片和附件链接"></a>文章里插入图片和附件链接</h4><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[这是图片描述]</span>(HAPROXYCODE.pdf)<br></code></pre></div></td></tr></table></figure><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Markdown文档的基础使用和hexo常用的功能</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-11-04 16:24:03</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">个人Blog</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h4 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Markdown文档的基础使用和hexo常用的功能</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-11-04 16:24:03</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">个人Blog</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">markdown</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p>]]></content>
    
    
    <categories>
      
      <category>个人Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows和linux frp自动管理配置</title>
    <link href="/2024/11/03/windows%E5%92%8Clinux-frp%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/11/03/windows%E5%92%8Clinux-frp%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>frp 是一个可用于内网穿透的高性能的反向代理开源应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。<br>frp 使用Go 语言开发，得益于此，我们使用非常简单，只需要添加执行权限就可以运行了。如果需要将它运行在后台，作为服务的运行的话，就需要我们对系统有一定的了解了，下面我简单介绍一下，如何将 frp安装为系统服务<br>注意：在安装服务之前，请确保你的 frp 已经参照<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">官方文档</a>进行了正确的配置。<br><a href="https://github.com/fatedier/frp/releases">frp下载地址</a></p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote><p>FRP以其轻量级、高性能、易用性而受到用户青睐。它采用Go语言编写，支持跨平台部署，包括Linux、Windows等操作系统。FRP的配置简单直观，使用TOML格式的配置文件，易于理解和编辑。此外，FRP还提供了Dashboard功能，方便用户通过Web界面监控和管理服务状态。</p></blockquote><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p><img src="/2024/11/03/windows%E5%92%8Clinux-frp%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/frp1.PNG"></p><ul><li><strong>内网穿透</strong>：FRP可以将内网服务映射到公网上，实现远程访问。</li><li><strong>协议支持</strong>：支持TCP、UDP、HTTP、HTTPS等协议，适用于不同服务的需求。</li><li><strong>安全性</strong>：提供数据加密、身份验证等安全机制，保护数据传输安全。</li><li><strong>负载均衡</strong>：支持多节点负载均衡，提高服务的可用性和稳定性。</li><li><strong>插件系统</strong>：允许用户通过插件扩展FRP的功能。</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="frps-ini"><a href="#frps-ini" class="headerlink" title="frps.ini"></a>frps.ini</h3><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span> <span class="hljs-comment"># 绑定的端口,服务端需要防火墙放行</span><br><span class="hljs-attr">authentication_method</span> = token <span class="hljs-comment"># 名字</span><br><span class="hljs-attr">authenticate_new_work_conns</span> = <span class="hljs-literal">true</span> <span class="hljs-comment"># 打开使用密码登录</span><br><span class="hljs-attr">token</span> = <span class="hljs-number">53</span>bdb2b9360a9c3c6dffa9999900000 <span class="hljs-comment"># 密钥 可以自己定义</span><br></code></pre></div></td></tr></table></figure><h3 id="frpc-ini"><a href="#frpc-ini" class="headerlink" title="frpc.ini"></a>frpc.ini</h3><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">98.0</span>.<span class="hljs-number">0.0</span> <span class="hljs-comment"># 云服务器ip</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span> <span class="hljs-comment"># frps.ini的server_port一致</span><br><span class="hljs-attr">authentication_method</span> = token<br><span class="hljs-attr">authenticate_new_work_conns</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">token</span> = <span class="hljs-number">53</span>bdb2b9360a9c3c6dffa9999900000<br><span class="hljs-section">[ssh1]</span> <br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">15687</span> <span class="hljs-comment"># 内网想要映射的端口1</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6000</span> <span class="hljs-comment"># 映射到云服务的端口1</span><br><br><span class="hljs-section">[ssh2]</span> <span class="hljs-comment">#可以配置多个,注意不要重名</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">15688</span> <span class="hljs-comment"># 内网想要映射的端口2</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6001</span> <span class="hljs-comment"># 映射到云服务的端口2</span><br></code></pre></div></td></tr></table></figure><h3 id="云服务器防火墙配置"><a href="#云服务器防火墙配置" class="headerlink" title="云服务器防火墙配置"></a>云服务器防火墙配置</h3><blockquote><p>需要打开的端口</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">7000</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">6001</span><br></code></pre></div></td></tr></table></figure><h3 id="客户端防火墙配置"><a href="#客户端防火墙配置" class="headerlink" title="客户端防火墙配置"></a>客户端防火墙配置</h3><blockquote><p>需要打开的端口</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">15687</span>,<span class="hljs-number">15688</span><br></code></pre></div></td></tr></table></figure><h2 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h2><ul><li><strong>下载</strong> ：<a href="https://github.com/fatedier/frp/releases">frp下载地址</a></li><li><strong>解压</strong>：解压到对应的文件夹</li><li><strong>配置</strong>：编辑<code>frps.ini</code>（服务端配置文件）和<code>frpc.ini</code>（客户端配置文件），设置服务端和客户端的通信地址、端口、令牌等信息。</li><li><strong>启动</strong>：在服务端执行<code>./frps -c ./frps.ini</code>启动服务端，在客户端执行<code>./frpc -c ./frpc.ini</code>启动客户端。</li><li><strong>验证</strong>：通过访问公网服务器的指定端口或配置的域名来测试内网服务是否成功暴露。</li></ul><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>若要将 frp 安装为 windows 的服务，我们需要借助第三方的开源工具 nssm 来实现，以下是操作步骤：<br><a href="https://nssm.cc/download">nssm下载地址</a></p><ol><li>以管理员方式运行 cmd, 直接输入 d 按回车 切换到d盘</li><li>在cmd中运行 命令.\nssm install ，此时会弹出 Gui</li><li>GUI 中选择你的frp路径，以及在 Arguments 中 正确的填入 -c 完整配置文件路径，如图：<br><img src="/2024/11/03/windows%E5%92%8Clinux-frp%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/frp2.png" alt="frp2"></li><li>点击 install service 后，cmd会提示：Service “frpc” installed successfully! 表示安装完成<br>以上就是将frpc 安装为windows服务的操作步骤了，如果是 frps 也是同样的操作，就不再赘述了。</li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>把以下shell脚本增加到宝塔定时任务中定时重启就ok了(patch为frp解压目录)</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>frpc_pid=`ps -ef | grep frpc.ini | grep color -v | grep grep -v | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#echo $frpc_pid</span><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$frpc_pid</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$frpc_pid</span><br><span class="hljs-keyword">fi</span><br>path=/www/server/frp<br><span class="hljs-built_in">nohup</span> <span class="hljs-variable">$path</span>/frpc -c <span class="hljs-variable">$path</span>/frpc.ini &gt; <span class="hljs-variable">$path</span>/frpc.log 2&gt;&amp;1 &amp;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>nssm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Github+Hexo打造自己的永久Blog</title>
    <link href="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/"/>
    <url>/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h1><h2 id="GitHub官网"><a href="#GitHub官网" class="headerlink" title="GitHub官网"></a><a href="https://github.com/">GitHub官网</a></h2><ol><li>进入官网,点击sign up 进行注册<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github1.jpeg" alt="图片"></li><li>输入自己的邮箱<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github2.webp" alt="图片"><br>tips:有时需要科学上网,自行解决</li></ol><h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p> Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p>官网下载页面：<a href="https://git-scm.com/downloads">Gitdownload</a><br>我选择的是Win 64位的安装版本</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>双击安装包开始安装，一路点击 Next 即可，安装完成后鼠标右键会有 Git Bash Here，这是Git的命令行，说明安装成功<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github3.webp" alt="图片"><br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github4.webp" alt="图片"></p><h2 id="3-设置用户名和邮箱"><a href="#3-设置用户名和邮箱" class="headerlink" title="3. 设置用户名和邮箱"></a>3. 设置用户名和邮箱</h2><p>因为 Git 是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-meta"># user_name 填入 GitHub 用户名</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-meta"># user_email 填入 GitHub 注册的邮箱</span><br></code></pre></div></td></tr></table></figure><h1 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h1><p>VSCode 是一个非常好用的文本编辑器，之后编辑博客的相关配置文件以及后面的写博客都需要用到这个编辑器。</p><p>安装过程很简单，直接进入 <a href="https://code.visualstudio.com/">VSCode官网</a>  3，然后安装的时候建议所有步骤都直接点下一步</p><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p>进入 <a href="https://nodejs.org/en">Node 官网</a> 下载最新稳定版本<br>安装直接全点下一步<br>安装 Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测 Node.js 是否安装成功：<br>第一个命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></div></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 nodejs 的版本号。</p><p>第二个命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></div></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 npm 的版本号。</p><h2 id="换npm源"><a href="#换npm源" class="headerlink" title="换npm源"></a>换npm源</h2><p>npm是node.js自带的一个工具</p><p>为什么要换源 因为自带的我们国内可能无法正常使用</p><p>这一点有好多人没讲</p><p>真的很坑 所以我给大家讲一下</p><p>下面我介绍下如何使用淘宝镜像源。</p><h3 id="1-打开git命令行"><a href="#1-打开git命令行" class="headerlink" title="1. 打开git命令行"></a>1. 打开git命令行</h3><p><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github5.webp" alt="图片"></p><h3 id="2-命令设置"><a href="#2-命令设置" class="headerlink" title="2. 命令设置"></a>2. 命令设置</h3><figure class="highlight tcl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tcl"><span class="hljs-comment">#最新地址 淘宝 NPM 镜像站喊你切换新域名啦!</span><br>npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> https://<span class="hljs-keyword">registry</span>.npmmirror.com<br></code></pre></div></td></tr></table></figure><h3 id="3-查看镜像使用状态"><a href="#3-查看镜像使用状态" class="headerlink" title="3. 查看镜像使用状态"></a>3. 查看镜像使用状态</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">get</span> registry<br></code></pre></div></td></tr></table></figure><p>如果返回<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a> 1，说明配置成功</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录 GitHub 账号<br>登录进去点击右上角+号<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github6.webp" alt="图片"><br>点击这个</p><p><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github7.webp" alt="图片"><br>新建一个名为 username.github.io （这里的 username 要替换成自己的实际的用户名） 的仓库，如下图（我这里爆红是因为我已经创建过了）<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github8.webp" alt="图片"><br>填写仓库名，格式必须为&lt;用户名&gt;.github.io ，然后点击Create repository 。</p><h1 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h1><p>为什么要配置这个 因为我们首先要本地架构Hexo框架</p><p>写好博客 编译成html页面 上传到GitHub仓库</p><p>从本地链接GitHub要使用git这个工具、</p><p>而这些操作得有账号的所有权</p><p>有两种可以取得权限的方法</p><p>~~ 通过Personal access tokens 就是GitHub的密钥</p><p>还有就是本文这种 本文这种方法强力推荐 太好用了</p><p>打开 Git Bash，输入命令：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">ssh<span class="hljs-punctuation">-</span>keygen <span class="hljs-punctuation">-</span>t rsa <span class="hljs-punctuation">-</span>C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-meta"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></div></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户主目录 C:\Users\username.ssh ，.ssh文件夹一定存放在C:，至于后面的路径lenovo这个不一定每台电脑都相同。找到.ssh文件夹，打开如下：<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github9.webp" alt="图片"><br>然后找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，将内容全部复制。其中 id_rsa 是私钥不能泄露，id_rsa.pub 是公钥可以放心告诉他人。</p><p>尽量不要公钥告诉他人 哈哈哈<br>打开 <a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a>页面，新建一个 ssh key：<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github10.webp" alt="图片"><br>如果没有添加成功,可以自行查看是不是openssh(有个客户端和一个服务端)没有打开(自行百度)<br>Title 为标题，任意填即可，将刚刚复制的 id_rsa.pub 内容粘贴进去，最后点击 Add SSH key。在 Git Bash 中检测 GitHub 公钥设置是否成功，输入如下命令：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></div></td></tr></table></figure><p>验证是否连接成功，连接成功的话，显示如下：<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github11.png" alt="图片"><br>如果电脑上没有openssh,需要安装openssh服务端</p><h1 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h1><p>Hexo 官方文档：<a href="https://hexo.io/docs/">Documentation | Hexo 11</a></p><h2 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h2><p>Hexo 是一个简单、快速、强大的基于 Github Pages 的博客框架，支持 Markdown 格式，有众多优秀插件和主题。</p><h2 id="Hexo-原理"><a href="#Hexo-原理" class="headerlink" title="Hexo 原理"></a>Hexo 原理</h2><p>由于 Github Pages 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 Hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 GitHub 。</p><h2 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h2><p>在 Git Bash 中输入以下命令：<br><code>npm install -g hexo-cli # 此命令完成对 hexo 的安装</code><br>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 E:\blog\master-blog ，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，点右键鼠标：<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github12.webp" alt="图片"><br>打开git命令框,输入如下命令：<br><code>hexo init # 该命令完成 hexo 在本地博客目录的初始化</code></p><p><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github13.webp" alt="图片"></p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p><code>hexo g</code><br>执行以上命令后，Hexo 就会在 public 文件夹中生成相关的 html 文件，这些文件将来都是要提交到 GitHub 上的 username.github.io 的仓库中去的。<br>本地预览<br>在 Git Bash 输入以下命令：<br><code>hexo s</code><br>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，Ctrl+C 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 GitHub 上。</p><p>第一次初始化的时候 hexo 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑</p><h2 id="切换模板"><a href="#切换模板" class="headerlink" title="切换模板"></a>切换模板</h2><p>我推荐使用fluid</p><p>输入以下命令:</p><p> <code>git clone https://gitclone.com/github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</code></p><h2 id="指定模板"><a href="#指定模板" class="headerlink" title="指定模板"></a>指定模板</h2><p>如下修改博客目录中的 _config.yml：<br>theme: fluid # 指定主题<br>language: zh-CN # 指定语言，会影响主题显示的语言，按需修改<br><img src="/2024/11/02/%E5%88%A9%E7%94%A8Github-Hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B0%B8%E4%B9%85Blog/github14.webp" alt="图片"></p><h1 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h1><h2 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h2><p>打开根目录下站点配置文件 _config.yml，配置有关 deploy 的部分：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:你的用户名/你的用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:master08s/master08s.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></div></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在 Git Bash 中输入以下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件 </span><br></code></pre></div></td></tr></table></figure><p>在 Git Bash 中输入以下命令：</p><figure class="highlight sas"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></div></td></tr></table></figure><p>部署成功后，打开对应的网址 <a href="https://username.github.io/">https://username.github.io</a> ，如果出现了和本地预览一样的效果，那么，表明部署成功。</p>]]></content>
    
    
    <categories>
      
      <category>个人Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>hexo</tag>
      
      <tag>VSCode</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
